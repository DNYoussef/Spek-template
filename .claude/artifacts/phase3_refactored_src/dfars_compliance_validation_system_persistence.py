"""
Extracted persistence service from dfars_compliance_validation_system

Automatically generated by God Object Decomposer
"""

from dataclasses import dataclass
import sys
from lib.shared.utilities import get_logger
import os
from typing import Dict, List, Optional, Any
import json


"""Load existing validation data."""
def _load_system_data(self):
        """Load existing validation data."""
        # Load control assessments
        assessments_file = self.storage_path / "control_assessments.json"
        if assessments_file.exists():
            try:
                with open(assessments_file, 'r') as f:
                    assessments_data = json.load(f)

                for assessment_data in assessments_data:
                    assessment = ControlAssessment(
                        control_id=assessment_data["control_id"],
                        status=ControlStatus(assessment_data["status"]),
                        implementation_score=assessment_data["implementation_score"],
                        effectiveness_score=assessment_data["effectiveness_score"],
                        findings=assessment_data["findings"],
                        weaknesses=assessment_data["weaknesses"],
                        recommendations=assessment_data["recommendations"],
                        evidence_collected=assessment_data["evidence_collected"],
                        test_results=assessment_data["test_results"],
                        assessor=assessment_data["assessor"],
                        assessment_date=assessment_data["assessment_date"],
                        remediation_required=assessment_data["remediation_required"],
                        remediation_timeline=assessment_data.get("remediation_timeline")
                    )
                    self.control_assessments[assessment.control_id] = assessment

                logger.info(f"Loaded {len(self.control_assessments)} control assessments")

            except Exception as e:
                logger.error(f"Failed to load control assessments: {e}")

        # Load compliance gaps
        gaps_file = self.storage_path / "compliance_gaps.json"
        if gaps_file.exists():
            try:
                with open(gaps_file, 'r') as f:
                    gaps_data = json.load(f)

                for gap_data in gaps_data:
                    gap = ComplianceGap(
                        gap_id=gap_data["gap_id"],
                        control_id=gap_data["control_id"],
                        gap_type=gap_data["gap_type"],
                        severity=gap_data["severity"],
                        description=gap_data["description"],
                        impact_assessment=gap_data["impact_assessment"],
                        remediation_plan=gap_data["remediation_plan"],
                        estimated_effort=gap_data["estimated_effort"],
                        target_completion=gap_data["target_completion"],
                        responsible_party=gap_data["responsible_party"],
                        dependencies=gap_data["dependencies"]
                    )
                    self.compliance_gaps[gap.gap_id] = gap

                logger.info(f"Loaded {len(self.compliance_gaps)} compliance gaps")

            except Exception as e:
                logger.error(f"Failed to load compliance gaps: {e}")

"""Save validation data to storage."""
def _save_system_data(self):
        """Save validation data to storage."""
        # Save control assessments
        assessments_data = [asdict(assessment) for assessment in self.control_assessments.values()]
        for assessment_data in assessments_data:
            assessment_data["status"] = assessment_data["status"]["value"] if isinstance(assessment_data["status"], dict) else assessment_data["status"]

        assessments_file = self.storage_path / "control_assessments.json"
        try:
            with open(assessments_file, 'w') as f:
                json.dump(assessments_data, f, indent=2)
        except Exception as e:
            logger.error(f"Failed to save control assessments: {e}")

        # Save compliance gaps
        gaps_data = [asdict(gap) for gap in self.compliance_gaps.values()]
        gaps_file = self.storage_path / "compliance_gaps.json"
        try:
            with open(gaps_file, 'w') as f:
                json.dump(gaps_data, f, indent=2)
        except Exception as e:
            logger.error(f"Failed to save compliance gaps: {e}")

"""Save validation results to storage."""
def _save_validation_results(self, validation_results: Dict[str, Any]):
        """Save validation results to storage."""
        results_file = self.storage_path / f"validation_results_{int(time.time())}.json"

        try:
            with open(results_file, 'w') as f:
                json.dump(validation_results, f, indent=2)

            logger.info(f"Validation results saved to: {results_file}")

        except Exception as e:
            logger.error(f"Failed to save validation results: {e}")

        # Save system data
        self._save_system_data()

