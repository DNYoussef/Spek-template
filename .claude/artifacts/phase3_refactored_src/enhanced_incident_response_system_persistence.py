"""
Extracted persistence service from enhanced_incident_response_system

Automatically generated by God Object Decomposer
"""

from dataclasses import dataclass
import sys
from lib.shared.utilities import get_logger
import os
from typing import Dict, List, Optional, Any
import json


"""Load notification configuration."""
def _load_notification_config(self) -> Dict[str, Any]:
        """Load notification configuration."""
        config_file = self.storage_path / "notification_config.json"

        default_config = {
            "email": {
                "smtp_server": "smtp.organization.mil",
                "smtp_port": 587,
                "use_tls": True,
                "username": "security-system",
                "from_address": "security-incidents@organization.mil"
            },
            "recipients": {
                "emergency": [
                    "ciso@organization.mil",
                    "security-team@organization.mil",
                    "operations-center@organization.mil"
                ],
                "critical": [
                    "security-team@organization.mil",
                    "compliance-officer@organization.mil"
                ],
                "high": ["security-team@organization.mil"],
                "medium": ["security-analysts@organization.mil"],
                "low": ["security-logs@organization.mil"]
            },
            "escalation": {
                "emergency_escalation_delay": 300,  # 5 minutes
                "critical_escalation_delay": 900,   # 15 minutes
                "high_escalation_delay": 3600,      # 1 hour
                "max_escalation_levels": 3
            },
            "external_reporting": {
                "dfars_compliance_endpoint": "https://dibnet.dod.mil/reporting",
                "fusion_center_endpoint": "https://disa.mil/incident-reporting",
                "law_enforcement_threshold": "critical"
            }
        }

        if config_file.exists():
            try:
                with open(config_file, 'r') as f:
                    loaded_config = json.load(f)
                    default_config.update(loaded_config)
            except Exception as e:
                logger.error(f"Failed to load notification config: {e}")

        return default_config

"""Load system data from storage."""
def _load_system_data(self):
        """Load system data from storage."""
        # Load incidents
        incidents_file = self.storage_path / "incidents.json"
        if incidents_file.exists():
            try:
                with open(incidents_file, 'r') as f:
                    incidents_data = json.load(f)

                for incident_data in incidents_data:
                    incident = SecurityIncident(
                        incident_id=incident_data["incident_id"],
                        incident_type=IncidentType(incident_data["incident_type"]),
                        severity=IncidentSeverity(incident_data["severity"]),
                        status=IncidentStatus(incident_data["status"]),
                        detected_timestamp=incident_data["detected_timestamp"],
                        source_system=incident_data["source_system"],
                        affected_resources=incident_data["affected_resources"],
                        indicators=incident_data["indicators"],
                        description=incident_data["description"],
                        initial_analysis=incident_data["initial_analysis"],
                        evidence=incident_data["evidence"],
                        response_actions=[ResponseAction(a) for a in incident_data["response_actions"]],
                        assigned_responder=incident_data.get("assigned_responder"),
                        containment_timestamp=incident_data.get("containment_timestamp"),
                        resolution_timestamp=incident_data.get("resolution_timestamp"),
                        lessons_learned=incident_data.get("lessons_learned"),
                        metadata=incident_data.get("metadata", {}),
                        threat_level=ThreatLevel(incident_data.get("threat_level", "medium")),
                        attack_vector=incident_data.get("attack_vector"),
                        potential_impact=incident_data.get("potential_impact"),
                        remediation_steps=incident_data.get("remediation_steps", []),
                        timeline=incident_data.get("timeline", [])
                    )
                    self.incidents[incident.incident_id] = incident

                logger.info(f"Loaded {len(self.incidents)} incidents")

            except Exception as e:
                logger.error(f"Failed to load incidents: {e}")

        # Load threat indicators
        indicators_file = self.storage_path / "threat_indicators.json"
        if indicators_file.exists():
            try:
                with open(indicators_file, 'r') as f:
                    indicators_data = json.load(f)

                for indicator_data in indicators_data:
                    indicator = ThreatIndicator(
                        indicator_id=indicator_data["indicator_id"],
                        indicator_type=indicator_data["indicator_type"],
                        pattern=indicator_data["pattern"],
                        severity=IncidentSeverity(indicator_data["severity"]),
                        description=indicator_data["description"],
                        confidence_level=indicator_data["confidence_level"],
                        ttl=indicator_data["ttl"],
                        created_timestamp=indicator_data["created_timestamp"],
                        last_seen=indicator_data.get("last_seen"),
                        hit_count=indicator_data.get("hit_count", 0),
                        false_positive_rate=indicator_data.get("false_positive_rate", 0.0),
                        mitigation_actions=[ResponseAction(a) for a in indicator_data.get("mitigation_actions", [])]
                    )
                    self.threat_indicators[indicator.indicator_id] = indicator

                logger.info(f"Loaded {len(self.threat_indicators)} threat indicators")

            except Exception as e:
                logger.error(f"Failed to load threat indicators: {e}")

        # Load forensic evidence
        evidence_file = self.storage_path / "forensic_evidence.json"
        if evidence_file.exists():
            try:
                with open(evidence_file, 'r') as f:
                    evidence_data = json.load(f)

                for evidence_item in evidence_data:
                    evidence = ForensicEvidence(
                        evidence_id=evidence_item["evidence_id"],
                        incident_id=evidence_item["incident_id"],
                        collection_timestamp=evidence_item["collection_timestamp"],
                        collector=evidence_item["collector"],
                        evidence_type=evidence_item["evidence_type"],
                        source_system=evidence_item["source_system"],
                        evidence_data=evidence_item["evidence_data"],
                        chain_of_custody=evidence_item["chain_of_custody"],
                        integrity_hash=evidence_item["integrity_hash"],
                        encryption_status=evidence_item["encryption_status"],
                        preservation_method=evidence_item["preservation_method"],
                        legal_hold=evidence_item.get("legal_hold", False)
                    )
                    self.forensic_evidence[evidence.evidence_id] = evidence

                logger.info(f"Loaded {len(self.forensic_evidence)} forensic evidence packages")

            except Exception as e:
                logger.error(f"Failed to load forensic evidence: {e}")

"""Save system data to storage."""
def _save_system_data(self):
        """Save system data to storage."""
        # Save incidents
        incidents_data = []
        for incident in self.incidents.values():
            incident_dict = asdict(incident)
            incident_dict["incident_type"] = incident.incident_type.value
            incident_dict["severity"] = incident.severity.value
            incident_dict["status"] = incident.status.value
            incident_dict["threat_level"] = incident.threat_level.value
            incident_dict["response_actions"] = [a.value for a in incident.response_actions]
            incidents_data.append(incident_dict)

        incidents_file = self.storage_path / "incidents.json"
        try:
            with open(incidents_file, 'w') as f:
                json.dump(incidents_data, f, indent=2)
        except Exception as e:
            logger.error(f"Failed to save incidents: {e}")

        # Save threat indicators
        indicators_data = []
        for indicator in self.threat_indicators.values():
            indicator_dict = asdict(indicator)
            indicator_dict["severity"] = indicator.severity.value
            indicator_dict["mitigation_actions"] = [a.value for a in indicator.mitigation_actions]
            indicators_data.append(indicator_dict)

        indicators_file = self.storage_path / "threat_indicators.json"
        try:
            with open(indicators_file, 'w') as f:
                json.dump(indicators_data, f, indent=2)
        except Exception as e:
            logger.error(f"Failed to save threat indicators: {e}")

        # Save forensic evidence
        evidence_data = [asdict(evidence) for evidence in self.forensic_evidence.values()]
        evidence_file = self.storage_path / "forensic_evidence.json"
        try:
            with open(evidence_file, 'w') as f:
                json.dump(evidence_data, f, indent=2)
        except Exception as e:
            logger.error(f"Failed to save forensic evidence: {e}")

