"""
Extracted persistence service from continuous_risk_assessment

Automatically generated by God Object Decomposer
"""

import time
from dataclasses import dataclass
import sys
from lib.shared.utilities import get_logger
import os
from typing import Dict, List, Optional, Any
import json


"""Load risk assessment configuration."""
def _load_config(self, config_path: Optional[str]) -> Dict[str, Any]:
        """Load risk assessment configuration."""
        default_config = {
            "risk_assessment": {
                "continuous_monitoring": True,
                "assessment_interval": 1800,  # 30 minutes
                "threat_intel_update_interval": 3600,  # 1 hour
                "vulnerability_scan_interval": 86400,  # 24 hours
                "risk_thresholds": {
                    "very_low": 0.2,
                    "low": 0.4,
                    "medium": 0.6,
                    "high": 0.8,
                    "critical": 1.0
                },
                "threat_intelligence": {
                    "feeds_enabled": True,
                    "commercial_feeds": [],
                    "government_feeds": ["cisa", "cert"],
                    "internal_feeds": True,
                    "confidence_threshold": 0.7
                },
                "vulnerability_management": {
                    "auto_discovery": True,
                    "cvss_threshold": 4.0,
                    "exploit_prioritization": True,
                    "patch_management_integration": True
                },
                "asset_management": {
                    "auto_discovery": True,
                    "criticality_assessment": True,
                    "dependency_mapping": True
                },
                "alerting": {
                    "high_risk_threshold": 0.7,
                    "critical_risk_threshold": 0.9,
                    "trend_analysis": True,
                    "predictive_alerting": True
                }
            }
        }

        if config_path and path_exists(config_path):
            try:
                with open(config_path, 'r') as f:
                    loaded_config = json.load(f)
                    default_config.update(loaded_config)
            except Exception as e:
                logger.warning(f"Failed to load config from {config_path}: {e}")

        return default_config

"""Load existing risk assessment data."""
def _load_existing_data(self):
        """Load existing risk assessment data."""
        # Load threat indicators
        indicator_files = self.storage_path.glob("threat_indicators_*.json")
        for indicator_file in indicator_files:
            try:
                with open(indicator_file, 'r') as f:
                    indicators_data = json.load(f)
                    for indicator_data in indicators_data:
                        indicator = ThreatIndicator(
                            indicator_id=indicator_data['indicator_id'],
                            indicator_type=indicator_data['indicator_type'],
                            indicator_value=indicator_data['indicator_value'],
                            threat_category=ThreatCategory(indicator_data['threat_category']),
                            confidence_score=indicator_data['confidence_score'],
                            severity=RiskLevel(indicator_data['severity']),
                            first_seen=indicator_data['first_seen'],
                            last_seen=indicator_data['last_seen'],
                            source=indicator_data['source'],
                            context=indicator_data['context'],
                            ttl=indicator_data.get('ttl')
                        )
                        self.threat_indicators[indicator.indicator_id] = indicator
            except Exception as e:
                logger.error(f"Failed to load threat indicators from {indicator_file}: {e}")

        # Load vulnerabilities
        vuln_files = self.storage_path.glob("vulnerabilities_*.json")
        for vuln_file in vuln_files:
            try:
                with open(vuln_file, 'r') as f:
                    vulns_data = json.load(f)
                    for vuln_data in vulns_data:
                        vulnerability = VulnerabilityAssessment(
                            vulnerability_id=vuln_data['vulnerability_id'],
                            cve_id=vuln_data.get('cve_id'),
                            title=vuln_data['title'],
                            description=vuln_data['description'],
                            affected_systems=vuln_data['affected_systems'],
                            cvss_score=vuln_data['cvss_score'],
                            risk_level=RiskLevel(vuln_data['risk_level']),
                            exploit_available=vuln_data['exploit_available'],
                            patch_available=vuln_data['patch_available'],
                            discovered_at=vuln_data['discovered_at'],
                            source=VulnerabilitySource(vuln_data['source']),
                            remediation_priority=vuln_data['remediation_priority'],
                            business_impact=vuln_data['business_impact'],
                            technical_impact=vuln_data['technical_impact']
                        )
                        self.vulnerabilities[vulnerability.vulnerability_id] = vulnerability
            except Exception as e:
                logger.error(f"Failed to load vulnerabilities from {vuln_file}: {e}")

        logger.info(f"Loaded {len(self.threat_indicators)} threat indicators and {len(self.vulnerabilities)} vulnerabilities")

