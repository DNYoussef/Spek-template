"""
Extracted validation service from core

Automatically generated by God Object Decomposer
"""

from typing import Dict, List, Optional, Any
from dataclasses import dataclass
import sys
import os
from src.constants.base import UNIFIED_POLICY_NAMES


"""Validate that critical dependencies are available for CI/CD compatibility."""
def validate_critical_dependencies():
    """Validate that critical dependencies are available for CI/CD compatibility."""
    critical_deps = ['pathspec', 'toml', 'typing_extensions', 'dataclasses', 'json']
    missing_deps = []

    for dep in critical_deps:
        try:
            __import__(dep)
        except ImportError:
            missing_deps.append(dep)

    return missing_deps

        def validate_policy_name(self, policy_name):
            return policy_name in ["nasa-compliance", "strict", "standard", "lenient", "nasa_jpl_pot10", "strict-core", "default", "service-defaults"]

"""Resolve and validate policy configuration."""
def _resolve_and_validate_policy(args):
    """Resolve and validate policy configuration."""
    policy = "nasa_jpl_pot10" if args.nasa_validation else args.policy

    if resolve_policy_name:
        try:
            policy = resolve_policy_name(policy, warn_deprecated=True)
        except Exception:
            pass

    if validate_policy_name and not validate_policy_name(policy):
        available_policies = []
        if list_available_policies:
            try:
                available_policies = list_available_policies(include_legacy=True)
            except Exception:
                from src.constants.base import UNIFIED_POLICY_NAMES
                available_policies = UNIFIED_POLICY_NAMES
        else:
            from src.constants.base import UNIFIED_POLICY_NAMES
            available_policies = UNIFIED_POLICY_NAMES

        print(f"Error: Unknown policy "{policy}'. Available: {', '.join(available_policies)}', file=sys.stderr)
        sys.exit(1)

    return policy

