{
  "permissions": {
    "allow": [
      "Bash(uvx:*)",
      "Bash(curl:*)",
      "Bash(unzip:*)",
      "Bash(codex:*)",
      "Bash(gemini:*)",
      "Bash(claude --version)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(tree:*)",
      "Read(//c/Users/17175/Desktop/connascence/analyzer/**)",
      "Read(//c/Users/17175/Desktop/connascence/interfaces/cli/**)",
      "Read(//c/Users/17175/Desktop/connascence/interfaces/core/**)",
      "Read(//c/Users/17175/Desktop/connascence/.github/**)",
      "Bash(robocopy:*)",
      "Bash(echo:*)",
      "Bash(chmod:*)",
      "Bash(claude-flow --version)",
      "Bash(claude-flow:*)",
      "Bash(claude mcp:*)",
      "Read(//c/Users/17175/AppData/**)",
      "Bash(find:*)",
      "Bash(./scripts/update_agents_spek_augment.sh:*)",
      "Bash(bash -c 'find .claude/agents -name \"*.md\" | head -5 | while read file; do echo \"Processing: $file\"; done')",
      "Bash(node:*)",
      "Bash(./scripts/lint_agents.sh:*)",
      "Bash(./scripts/batch_update_agents.sh:*)",
      "Bash(scripts/ops_tripwires.sh report:*)",
      "Bash(scripts/sandbox_janitor.sh report:*)",
      "Bash(cat:*)",
      "Bash(scripts/self_correct.sh:*)",
      "Bash(scripts/gate_fail_reason.sh:*)",
      "Bash(git push:*)",
      "Bash(git checkout:*)",
      "Bash(git merge:*)",
      "Bash(git remote add:*)",
      "Bash(git pull:*)",
      "mcp__ide__executeCode",
      "Bash(npx:*)",
      "Bash(scripts/audit_swarm.sh:*)",
      "Bash(scripts/contextual_loop.sh:*)",
      "Bash(scripts/reality_validator.sh:*)",
      "Bash(scripts/memory_bridge.sh:*)",
      "Bash(scripts/analyzer_improvement_loop.sh:*)",
      "Bash(./scripts/audit_swarm.sh:*)",
      "Bash(./scripts/analyzer_improvement_loop.sh:*)",
      "Bash(gh run list:*)",
      "Bash(./scripts/run_complete_quality_loop.sh:*)",
      "Bash(./scripts/intelligent_failure_analysis.sh:*)",
      "Bash(./scripts/simple_quality_loop.sh:*)",
      "Bash(mkdir:*)",
      "Bash(python:*)",
      "WebSearch",
      "Bash(npm test:*)",
      "Bash(npm install)",
      "Bash(npm run typecheck:*)",
      "Bash(npm run lint)",
      "Bash(gh workflow list:*)",
      "Bash(gh api:*)",
      "Bash(ls:*)",
      "Bash(pip install:*)",
      "Bash(gh workflow run:*)",
      "Bash(timeout 30 python analyzer/core.py --path . --format json --output /dev/null)",
      "Read(//tmp/**)",
      "Bash(timeout:*)",
      "Bash(./simulate_actions.sh:*)",
      "Bash(git --version)",
      "Bash(npm run build:*)",
      "Bash(bash --version)",
      "Bash(bash post-completion-cleanup.sh:*)",
      "Bash(xxd:*)",
      "Bash(bash:*)",
      "Bash(npm install:*)",
      "Bash(gh run view:*)",
      "Bash(sed:*)",
      "Bash(while IFS=$'\\t' read -r status conclusion title workflow branch trigger id duration date)",
      "Bash(do echo \"  - $workflow: $status ($conclusion)\")",
      "Bash(done)",
      "Bash(grep:*)",
      "Bash(npm audit:*)",
      "Bash(npm run setup:win:*)",
      "Bash(powershell:*)",
      "Bash(npm run mcp:init:*)",
      "Bash(claude /doctor)",
      "mcp__filesystem__list_directory",
      "mcp__filesystem__read_multiple_files",
      "mcp__filesystem__read_text_file",
      "Bash(yamllint:*)",
      "Bash(yaml-validator:*)",
      "mcp__filesystem__create_directory",
      "mcp__filesystem__directory_tree",
      "Bash(dir:*)",
      "Bash(if [ -f \".claude/.artifacts/test_ci_output.json\" ])",
      "Bash(then echo \"Output file created successfully\")",
      "Bash(else echo \"Output file not found\")",
      "Bash(fi)",
      "Bash(if [ -f \".claude/.artifacts/test_sarif_output.json\" ])",
      "Bash(else echo \"SARIF file not found\")",
      "Bash(git fetch:*)",
      "Read(//c/Users/17175/Desktop/**)",
      "mcp__memory__create_entities",
      "WebFetch(domain:docs.oasis-open.org)",
      "WebFetch(domain:github.com)",
      "mcp__filesystem__get_file_info",
      "mcp__filesystem__write_file",
      "mcp__memory__add_observations",
      "Bash(/reality:check:*)",
      "Bash(/theater:scan:*)",
      "mcp__filesystem__search_files",
      "mcp__memory__create_relations",
      "mcp__filesystem__list_allowed_directories",
      "mcp__filesystem__list_directory_with_sizes",
      "Bash(npm run test:*)",
      "mcp__memory__search_nodes",
      "Bash(xargs ls:*)",
      "Bash(cd:*)",
      "Bash(if [ -f \"scripts/json_validator.py\" ])",
      "Bash(then python scripts/json_validator.py --test-mode)",
      "Bash(else echo \"JSON validator not found, checking for quality gate integrator...\")",
      "Bash(if [ -f \"src/security/real_security_scanner.py\" ])",
      "Bash(then python src/security/real_security_scanner.py --test)",
      "Bash(else echo \"Real security scanner not found, checking alternatives...\")",
      "Bash(if [ -f \"analyzer/performance/real_cache_optimization_validator.py\" ])",
      "Bash(then python analyzer/performance/real_cache_optimization_validator.py --benchmark)",
      "Bash(else echo \"Cache optimization validator not found, checking alternatives...\")",
      "Bash(if [ -f \"scripts/workflow_optimizer.py\" ])",
      "Bash(then python scripts/workflow_optimizer.py --config configs/workflow_orchestration.yaml --mode debug)",
      "Bash(else echo \"Workflow optimizer not found, checking alternatives...\")",
      "mcp__memory__read_graph",
      "Bash(gh run download:*)",
      "Bash(gh repo view:*)",
      "Bash(pip --version)",
      "Bash(semgrep:*)",
      "Bash(bandit:*)",
      "Bash(safety:*)",
      "Bash(pip-audit:*)",
      "Bash(ruff:*)"
    ],
    "deny": [],
    "ask": []
  },
  "hooks": {
    "PostToolUse": [
      {
        "matcher": "Task",
        "hooks": [
          {
            "type": "command",
            "command": "./scripts/audit_swarm.sh --mode comprehensive --theater true --evidence comprehensive || true"
          }
        ]
      },
      {
        "matcher": "Edit",
        "hooks": [
          {
            "type": "command",
            "command": "scripts/contextual_loop.sh .claude/.artifacts/audit_analysis.json --theater-focused --memory-update || true"
          }
        ]
      },
      {
        "matcher": "MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "scripts/contextual_loop.sh .claude/.artifacts/audit_analysis.json --theater-focused --memory-update || true"
          }
        ]
      }
    ],
    "PreToolUse": [
      {
        "matcher": "Bash(git commit:*)",
        "hooks": [
          {
            "type": "command",
            "command": "scripts/reality_validator.sh --scope comprehensive --deployment --user-journey"
          }
        ]
      }
    ],
    "SessionEnd": [
      {
        "matcher": "*",
        "hooks": [
          {
            "type": "command",
            "command": "scripts/memory_bridge.sh sync || true"
          }
        ]
      }
    ]
  }
}