# Enhanced Semgrep configuration for SPEK Analyzer Development
rules:
  # Allow legitimate analyzer patterns
  - id: allow-dynamic-analysis
    pattern-not-inside: |
      # Dynamic code analysis patterns
      exec(...)
      eval(...)
      compile(...)
    pattern: eval(...)
    message: Dynamic code evaluation allowed in analyzer context
    severity: INFO
    languages: [python]

  - id: allow-pickle-caching
    pattern-not-inside: |
      class $CLASS:
        ...
        def $METHOD(self, ...):
          ...
          pickle.$FUNC(...)
    pattern: pickle.loads(...)
    message: Pickle deserialization in controlled caching context
    severity: INFO
    languages: [python]

  - id: allow-shell-analysis
    pattern-not-inside: |
      # Shell command analysis
      subprocess.$METHOD(...)
      os.system(...)
    pattern: subprocess.run(...)
    message: Shell execution for code analysis
    severity: INFO
    languages: [python]

  - id: ignore-ast-analysis
    pattern-not-inside: |
      # AST manipulation is core to analyzer
      ast.$METHOD(...)
    pattern: ast.literal_eval(...)
    message: AST operations are safe in analyzer context
    severity: INFO
    languages: [python]

# Comprehensive path exclusions
paths:
  exclude:
    - tests/
    - test/
    - examples/
    - docs/
    - node_modules/
    - .git/
    - dist/
    - build/
    - .claude/
    - '**/*test*.py'
    - '**/*spec*.js'
    - '**/*example*.py'
    - '**/__pycache__/**'
    - '**/.*'
    - 'analyzer/enterprise/supply_chain/evidence_packager.py'  # Known safe file
    - 'analyzer/architecture/connascence_cache.py'  # Safe caching

# Use specific security rules instead of auto
rules:
  - p/security-audit
  - p/python

# Suppress common false positives
options:
  # Reduce noise from security rules
  severity:
    - ERROR
  confidence:
    - HIGH
