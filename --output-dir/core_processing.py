"""
Extracted processing service from core

Automatically generated by God Object Decomposer
"""

import traceback
from src.constants.base import UNIFIED_POLICY_NAMES
from dataclasses import dataclass
from analyzer.duplication_unified import format_duplication_analysis
from analyzer.reporting.sarif import SARIFReporter
import json
import os
import sys
from core.unified_imports import IMPORT_MANAGER
from typing import Dict, List, Optional, Any
from pathlib import Path
from datetime import datetime
from typing import Dict
from analyzer.architecture.orchestrator import ArchitectureOrchestrator
from typing import Any
from analyzer.reporting.json import JSONReporter
from typing import List
from real_unified_analyzer import RealUnifiedAnalyzer
from analyzer.duplication_unified import UnifiedDuplicationAnalyzer
from typing import Optional
from utils.types import ConnascenceViolation
from analyzer.core.unified_imports import IMPORT_MANAGER


"""Handle output formatting and export."""
def _handle_output(result, args):
    """Handle output formatting and export."""
    if args.format == "sarif":
        _export_sarif(result, args.output)
    elif args.format == "json":
        _export_json(result, args.output)
    else:
        if args.output:
            with open(args.output, "w") as f:
                f.write(str(result))
        else:
            print(result)

"""Handle enhanced pipeline exports."""
def _handle_exports(result, args):
    """Handle enhanced pipeline exports."""
    if not (args.enable_correlations or args.enable_audit_trail or args.enable_smart_recommendations):
        return

    if args.export_audit_trail and result.get("audit_trail"):
        with open(args.export_audit_trail, "w") as f:
            json.dump(result["audit_trail"], f, indent=2, default=str)
        print(f"Audit trail exported to: {args.export_audit_trail}")

    if args.export_correlations and result.get("correlations"):
        with open(args.export_correlations, "w") as f:
            json.dump(result["correlations"], f, indent=2, default=str)
        print(f"Correlations exported to: {args.export_correlations}")

    if args.export_recommendations and result.get("smart_recommendations"):
        with open(args.export_recommendations, "w") as f:
            json.dump(result["smart_recommendations"], f, indent=2, default=str)
        print(f"Smart recommendations exported to: {args.export_recommendations}")

"""Handle exit conditions and status codes."""
def _handle_exit_conditions(result, args):
    """Handle exit conditions and status codes."""
    if not result.get("success", False):
        print(f"Analysis failed: {result.get('error', 'Unknown error')}", file=sys.stderr)
        sys.exit(1)

    violations = result.get("violations", [])
    critical_count = len([v for v in violations if v.get("severity") == "critical"])
    god_object_count = len(result.get("god_objects", []))
    compliance_percent = int(result.get("summary", {}).get("overall_quality_score", 1.0) * 100)

    should_exit_with_error = False
    exit_reasons = []

    if args.fail_on_critical and critical_count > 0:
        should_exit_with_error = True
        exit_reasons.append(f"{critical_count} critical violations found")

    if god_object_count > args.max_god_objects:
        should_exit_with_error = True
        exit_reasons.append(f"{god_object_count} god objects (max: {args.max_god_objects})")

    if compliance_percent < args.compliance_threshold:
        should_exit_with_error = True
        exit_reasons.append(f"compliance {compliance_percent}% < {args.compliance_threshold}%")

    if critical_count > 0 and args.strict_mode:
        should_exit_with_error = True
        exit_reasons.append(f"{critical_count} critical violations (strict mode)")

    if should_exit_with_error:
        print(f"Analysis failed: {', '.join(exit_reasons)}", file=sys.stderr)
        sys.exit(1)

    print(f"Analysis completed successfully. {len(violations)} total violations ({critical_count} critical)")
    sys.exit(0)

"""Handle analysis errors."""
def _handle_error(error, args):
    """Handle analysis errors."""
    print(f"Analyzer error: {error}", file=sys.stderr)
    import traceback
    traceback.print_exc()

    if args.output and args.format in ["json", "sarif"]:
        try:
            minimal_result = {
                "success": False, "error": str(error),
                "violations": [], "summary": {"total_violations": 0},
                "nasa_compliance": {"score": 0.0, "violations": []}
            }

            if args.format == "sarif":
                SARIFReporter().export_results(minimal_result, args.output)
            else:
                JSONReporter().export_results(minimal_result, args.output)

            print(f"Minimal {args.format.upper()} report written for CI compatibility")
        except Exception as export_error:
            print(f"Failed to write minimal report: {export_error}", file=sys.stderr)

    sys.exit(1)

