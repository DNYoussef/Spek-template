name: Analyzer Failure Reporter

on:
  workflow_run:
    workflows:
      - "Analyzer Integration"
      - "NASA POT10 Compliance Gates"
      - "Security Quality Gate Orchestrator"
      - "Connascence Quality Gates"
      - "Comprehensive Test Integration"
      - "Enhanced Notification Strategy"
    types: [completed]
  # No scheduled runs - only on actual workflow failures

jobs:
  failure-detector:
    name: Detect and Report Analyzer Failures
    runs-on: ubuntu-latest
    # Only run on failures or when analyzer code changes
    if: |
      github.event.workflow_run.conclusion == 'failure' ||
      (github.event_name == 'push' &&
       (contains(github.event.head_commit.message, 'analyzer') ||
        contains(github.event.head_commit.message, 'fix')))

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Analyze workflow failure
      id: analyze-failure
      if: github.event_name == 'workflow_run'
      continue-on-error: true
      uses: actions/github-script@v7
      with:
        script: |
          const workflowRun = context.payload.workflow_run;

          console.log(`Analyzing failed workflow: ${workflowRun.name}`);
          console.log(`Run ID: ${workflowRun.id}`);
          console.log(`Conclusion: ${workflowRun.conclusion}`);

          // Critical analyzer workflows only
          const criticalWorkflows = [
            'connascence', 'nasa-pot10', 'security-orchestrator',
            'analyzer-integration', 'unified-analyzer', 'comprehensive-test',
            'notification-strategy'
          ];

          const isCriticalFailure = criticalWorkflows.some(keyword =>
            workflowRun.name.toLowerCase().includes(keyword)
          );

          if (isCriticalFailure) {
            core.setOutput('is-critical-failure', 'true');
            core.setOutput('workflow-name', workflowRun.name);
            core.setOutput('workflow-url', workflowRun.html_url);
            core.setOutput('failure-type', 'critical-analyzer');
          } else {
            core.setOutput('is-critical-failure', 'false');
            core.setOutput('failure-type', 'non-critical');
          }

    - name: Test analyzer imports
      id: test-imports
      continue-on-error: false
      run: |
        python3 -c "
        import sys
        import os
        sys.path.insert(0, '.')

        print('Testing analyzer imports...')

        try:
            import analyzer
            print('[PASS] Base analyzer import successful')
        except Exception as e:
            print(f'[FAIL] Base analyzer import failed: {e}')
            exit(1)

        try:
            from analyzer import UnifiedAnalyzer, UNIFIED_ANALYZER_AVAILABLE
            if UNIFIED_ANALYZER_AVAILABLE:
                print('[PASS] UnifiedAnalyzer import successful')
            else:
                print('[WARN] UnifiedAnalyzer not available but handled gracefully')
        except Exception as e:
            print(f'[FAIL] UnifiedAnalyzer import failed: {e}')
            exit(1)

        try:
            from analyzer.performance import REAL_TIME_MONITOR_AVAILABLE, CACHE_PROFILER_AVAILABLE
            if REAL_TIME_MONITOR_AVAILABLE and CACHE_PROFILER_AVAILABLE:
                print('[PASS] Performance modules available')
            else:
                print('[WARN] Some performance modules unavailable but handled')
        except Exception as e:
            print(f'[FAIL] Performance module import failed: {e}')
            exit(1)

        print('All critical imports successful!')
        " 2>&1 | tee analyzer_test_output.txt

    - name: Run basic test suite
      id: run-tests
      continue-on-error: false
      run: |
        if [ -f "tests/test_analyzer.py" ]; then
          echo "Running analyzer tests..."
          python3 tests/test_analyzer.py 2>&1 | tee test_output.txt
          echo "test-status=completed" >> $GITHUB_OUTPUT
        else
          echo "No test file found, creating minimal test..."
          echo "test-status=skipped" >> $GITHUB_OUTPUT
        fi

    - name: Generate failure report
      if: failure() || steps.analyze-failure.outputs.is-critical-failure == 'true'
      run: |
        mkdir -p .claude/.artifacts

        echo "# Analyzer Failure Report" > .claude/.artifacts/failure-report.md
        echo "Generated: $(date)" >> .claude/.artifacts/failure-report.md
        echo "" >> .claude/.artifacts/failure-report.md

        if [[ "${{ steps.analyze-failure.outputs.is-critical-failure }}" == "true" ]]; then
          echo "## Critical Workflow Failure" >> .claude/.artifacts/failure-report.md
          echo "- Workflow: ${{ steps.analyze-failure.outputs.workflow-name }}" >> .claude/.artifacts/failure-report.md
          echo "- URL: ${{ steps.analyze-failure.outputs.workflow-url }}" >> .claude/.artifacts/failure-report.md
          echo "- Type: ${{ steps.analyze-failure.outputs.failure-type }}" >> .claude/.artifacts/failure-report.md
        fi

        echo "" >> .claude/.artifacts/failure-report.md
        echo "## Import Test Results" >> .claude/.artifacts/failure-report.md
        if [ -f "analyzer_test_output.txt" ]; then
          echo "\`\`\`" >> .claude/.artifacts/failure-report.md
          cat analyzer_test_output.txt >> .claude/.artifacts/failure-report.md
          echo "\`\`\`" >> .claude/.artifacts/failure-report.md
        fi

        echo "" >> .claude/.artifacts/failure-report.md
        echo "## Test Results" >> .claude/.artifacts/failure-report.md
        if [ -f "test_output.txt" ]; then
          echo "\`\`\`" >> .claude/.artifacts/failure-report.md
          cat test_output.txt >> .claude/.artifacts/failure-report.md
          echo "\`\`\`" >> .claude/.artifacts/failure-report.md
        fi

    - name: Upload failure artifacts
      if: failure() || steps.analyze-failure.outputs.is-critical-failure == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: analyzer-failure-report-${{ github.run_number }}
        path: |
          .claude/.artifacts/failure-report.md
          analyzer_test_output.txt
          test_output.txt
        retention-days: 30

    # Only send notifications for CRITICAL failures
    - name: Send critical failure notification
      if: |
        failure() &&
        (steps.analyze-failure.outputs.is-critical-failure == 'true' ||
         steps.test-imports.outcome == 'failure')
      uses: actions/github-script@v7
      with:
        script: |
          const title = '[ALERT] Critical Analyzer Failure Detected';
          const body = `
          A critical analyzer failure has been detected:

          **Workflow**: ${{ steps.analyze-failure.outputs.workflow-name || 'Import Test' }}
          **Run**: ${{ github.run_id }}
          **Commit**: ${{ github.sha }}

          **Import Status**: ${{ steps.test-imports.outcome }}
          **Test Status**: ${{ steps.run-tests.outputs.test-status }}

          See artifacts for detailed failure report.

          This requires immediate attention to prevent production impact.
          `;

          // Create issue only for critical failures
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['bug', 'critical', 'analyzer', 'ci-failure']
          });

    - name: Summary
      if: always()
      run: |
        echo "## Analyzer Health Check Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Import Test: ${{ steps.test-imports.outcome }}" >> $GITHUB_STEP_SUMMARY
        echo "- Basic Tests: ${{ steps.run-tests.outputs.test-status }}" >> $GITHUB_STEP_SUMMARY
        echo "- Critical Failure: ${{ steps.analyze-failure.outputs.is-critical-failure || 'false' }}" >> $GITHUB_STEP_SUMMARY

        if [[ "${{ steps.analyze-failure.outputs.is-critical-failure }}" == "true" ]]; then
          echo "[ALERT] Critical failure detected - issue created" >> $GITHUB_STEP_SUMMARY
        else
          echo "[OK] No critical failures detected" >> $GITHUB_STEP_SUMMARY
        fi