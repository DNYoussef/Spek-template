name: Enhanced PR Quality Gate with Unified Analyzer

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

env:
  QUALITY_DEGRADATION_THRESHOLD: 5
  CRITICAL_VIOLATION_THRESHOLD: 25
  MAGIC_LITERAL_THRESHOLD: 100

jobs:
  enhanced-quality-degradation-check:
    name: Enhanced Quality Degradation Analysis (Analyzer v2.0)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci || echo "No package.json found"
          pip install --upgrade pip
          pip install -r requirements.txt || echo "No requirements.txt found"
          pip install jq bc

          # Verify analyzer availability
          python -c "from analyzer.unified_analyzer import UnifiedConnascenceAnalyzer" 2>/dev/null || {
            echo "[WARN] New analyzer not available, will use fallback analysis"
          }

      - name: Get Base Branch Comprehensive Metrics
        id: base-metrics
        run: |
          # Checkout base branch to get comprehensive metrics
          git checkout ${{ github.base_ref }}
          echo "[BAR_CHART] Analyzing base branch: ${{ github.base_ref }}"

          # Ensure output directory exists
          mkdir -p .claude/.artifacts

          # Run comprehensive analyzer on base branch
          if python -m analyzer . --comprehensive --output base-comprehensive-analysis.json 2>/dev/null; then
            echo "[OK] Comprehensive analyzer executed on base branch"

            # Extract metrics using new analyzer data
            python3 << 'EOF'
            import json
            import os
            import math

            try:
                with open('base-comprehensive-analysis.json', 'r') as f:
                    data = json.load(f)

                violations = data.get('violations', [])
                total_violations = len(violations)

                # Extract violation counts by type
                magic_literals = len([v for v in violations if v.get('type') == 'Magic Literal'])
                hardcoded_paths = len([v for v in violations if v.get('type') == 'Hardcoded Path'])
                god_objects = len([v for v in violations if v.get('type') == 'God Object'])
                critical_violations = len([v for v in violations if v.get('severity') == 'CRITICAL'])
                high_violations = len([v for v in violations if v.get('severity') == 'HIGH'])

            # Calculate derived metrics
            # Theater score (enhanced calculation)
            theater_indicators = magic_literals + hardcoded_paths + (critical_violations * 2)
            if theater_indicators == 0:
            theater_score = 100
            else:
            theater_score = max(0, 100 - int(math.log10(theater_indicators + 1) * 15))

            # NASA compliance estimation
            total_files = len(set(v.get('file', 'unknown') for v in violations))
            if total_files > 0:
            violation_density = total_violations / total_files
            nasa_compliance = max(10, 100 - (violation_density * 2))
            else:
            nasa_compliance = 90

            # Set outputs
            with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f"nasa={nasa_compliance:.1f}\n")
            f.write(f"theater={theater_score}\n")
            f.write(f"god={god_objects}\n")
            f.write(f"critical={critical_violations}\n")
            f.write(f"magic_literals={magic_literals}\n")
            f.write(f"hardcoded_paths={hardcoded_paths}\n")
            f.write(f"total_violations={total_violations}\n")
            f.write(f"analyzer_version=unified_2.0\n")

            print(f"[CHART] Base metrics: NASA={nasa_compliance:.1f}%, Theater={theater_score}, God Objects={god_objects}")
            print(f"[CHART] Base violations: Total={total_violations:,}, Critical={critical_violations}, Magic={magic_literals:,}")

            except Exception as e:
                print(f"[WARN] Error processing base analysis: {e}")
                # Fallback values
                with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write("nasa=58.0\n")  # Known baseline from analyzer report
            f.write("theater=70\n")
            f.write("god=10\n")
            f.write("critical=100\n")
            f.write("magic_literals=1000\n")
            f.write("hardcoded_paths=500\n")
            f.write("total_violations=5000\n")
            f.write("analyzer_version=fallback\n")
            EOF

          else
            echo "[WARN] Comprehensive analyzer failed on base branch, using fallback analysis"
            # Fallback to basic estimates based on known baseline
            echo "nasa=58.0" >> $GITHUB_OUTPUT
            echo "theater=70" >> $GITHUB_OUTPUT
            echo "god=10" >> $GITHUB_OUTPUT
            echo "critical=100" >> $GITHUB_OUTPUT
            echo "magic_literals=1000" >> $GITHUB_OUTPUT
            echo "hardcoded_paths=500" >> $GITHUB_OUTPUT
            echo "total_violations=5000" >> $GITHUB_OUTPUT
            echo "analyzer_version=fallback" >> $GITHUB_OUTPUT
          fi

          # Test Coverage (traditional)
          npm test -- --coverage --coverageReporters=json-summary > /dev/null 2>&1 || true
          if [ -f "coverage/coverage-summary.json" ]; then
            BASE_COVERAGE=$(jq -r '.total.lines.pct // 0' coverage/coverage-summary.json)
            echo "coverage=$BASE_COVERAGE" >> $GITHUB_OUTPUT
          else
            echo "coverage=0" >> $GITHUB_OUTPUT
          fi

          # Return to PR branch
          git checkout -

      - name: Get PR Branch Comprehensive Metrics
        id: pr-metrics
        run: |
          echo "[BAR_CHART] Analyzing PR branch: ${{ github.head_ref }}"

          # Ensure output directory exists
          mkdir -p .claude/.artifacts

          # Run comprehensive analyzer on PR branch
          if python -m analyzer . --comprehensive --output pr-comprehensive-analysis.json 2>/dev/null; then
            echo "[OK] Comprehensive analyzer executed on PR branch"

            # Extract metrics using new analyzer data
            python3 << 'EOF'
            import json
            import os
            import math

            try:
            with open('pr-comprehensive-analysis.json', 'r') as f:
            data = json.load(f)

                violations = data.get('violations', [])
                total_violations = len(violations)

                # Extract violation counts by type
                magic_literals = len([v for v in violations if v.get('type') == 'Magic Literal'])
                hardcoded_paths = len([v for v in violations if v.get('type') == 'Hardcoded Path'])
                god_objects = len([v for v in violations if v.get('type') == 'God Object'])
                critical_violations = len([v for v in violations if v.get('severity') == 'CRITICAL'])
                high_violations = len([v for v in violations if v.get('severity') == 'HIGH'])

            # Calculate derived metrics
            # Theater score (enhanced calculation)
            theater_indicators = magic_literals + hardcoded_paths + (critical_violations * 2)
            if theater_indicators == 0:
            theater_score = 100
            else:
            theater_score = max(0, 100 - int(math.log10(theater_indicators + 1) * 15))

            # NASA compliance estimation
            total_files = len(set(v.get('file', 'unknown') for v in violations))
            if total_files > 0:
            violation_density = total_violations / total_files
            nasa_compliance = max(10, 100 - (violation_density * 2))
            else:
            nasa_compliance = 90

            # Set outputs
            with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f"nasa={nasa_compliance:.1f}\n")
            f.write(f"theater={theater_score}\n")
            f.write(f"god={god_objects}\n")
            f.write(f"critical={critical_violations}\n")
            f.write(f"magic_literals={magic_literals}\n")
            f.write(f"hardcoded_paths={hardcoded_paths}\n")
            f.write(f"total_violations={total_violations}\n")
            f.write(f"analyzer_version=unified_2.0\n")

            print(f"[CHART] PR metrics: NASA={nasa_compliance:.1f}%, Theater={theater_score}, God Objects={god_objects}")
            print(f"[CHART] PR violations: Total={total_violations:,}, Critical={critical_violations}, Magic={magic_literals:,}")

            except Exception as e:
            print(f"[WARN] Error processing PR analysis: {e}")
            # Conservative fallback values (assume degradation to trigger investigation)
            with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write("nasa=55.0\n")  # Slightly worse than baseline
            f.write("theater=65\n")
            f.write("god=15\n")
            f.write("critical=120\n")
            f.write("magic_literals=1200\n")
            f.write("hardcoded_paths=600\n")
            f.write("total_violations=5500\n")
            f.write("analyzer_version=fallback\n")
            EOF

          else
            echo "[WARN] Comprehensive analyzer failed on PR branch, using conservative fallback"
            # Conservative estimates (assume some degradation)
            echo "nasa=55.0" >> $GITHUB_OUTPUT
            echo "theater=65" >> $GITHUB_OUTPUT
            echo "god=15" >> $GITHUB_OUTPUT
            echo "critical=120" >> $GITHUB_OUTPUT
            echo "magic_literals=1200" >> $GITHUB_OUTPUT
            echo "hardcoded_paths=600" >> $GITHUB_OUTPUT
            echo "total_violations=5500" >> $GITHUB_OUTPUT
            echo "analyzer_version=fallback" >> $GITHUB_OUTPUT
          fi

          # Test Coverage (traditional)
          npm test -- --coverage --coverageReporters=json-summary > /dev/null 2>&1 || true
          if [ -f "coverage/coverage-summary.json" ]; then
            PR_COVERAGE=$(jq -r '.total.lines.pct // 0' coverage/coverage-summary.json)
            echo "coverage=$PR_COVERAGE" >> $GITHUB_OUTPUT
          else
            echo "coverage=0" >> $GITHUB_OUTPUT
          fi

      - name: Enhanced Quality Change Analysis
        id: analysis
        run: |
          # Get comprehensive metrics from both branches
          BASE_NASA="${{ steps.base-metrics.outputs.nasa }}"
          PR_NASA="${{ steps.pr-metrics.outputs.nasa }}"
          BASE_THEATER="${{ steps.base-metrics.outputs.theater }}"
          PR_THEATER="${{ steps.pr-metrics.outputs.theater }}"
          BASE_GOD="${{ steps.base-metrics.outputs.god }}"
          PR_GOD="${{ steps.pr-metrics.outputs.god }}"
          BASE_CRITICAL="${{ steps.base-metrics.outputs.critical }}"
          PR_CRITICAL="${{ steps.pr-metrics.outputs.critical }}"
          BASE_MAGIC="${{ steps.base-metrics.outputs.magic_literals }}"
          PR_MAGIC="${{ steps.pr-metrics.outputs.magic_literals }}"
          BASE_HARDCODED="${{ steps.base-metrics.outputs.hardcoded_paths }}"
          PR_HARDCODED="${{ steps.pr-metrics.outputs.hardcoded_paths }}"
          BASE_TOTAL="${{ steps.base-metrics.outputs.total_violations }}"
          PR_TOTAL="${{ steps.pr-metrics.outputs.total_violations }}"
          BASE_COVERAGE="${{ steps.base-metrics.outputs.coverage }}"
          PR_COVERAGE="${{ steps.pr-metrics.outputs.coverage }}"

          echo "[BAR_CHART] Enhanced Quality Change Analysis with Unified Analyzer v2.0"
          echo "Base analyzer: ${{ steps.base-metrics.outputs.analyzer_version }}"
          echo "PR analyzer: ${{ steps.pr-metrics.outputs.analyzer_version }}"

          DEGRADED=false
          DEGRADATION_REASONS=()

          # NASA Compliance check (more sensitive)
          if (( $(echo "$PR_NASA < ($BASE_NASA - $QUALITY_DEGRADATION_THRESHOLD)" | bc -l) )); then
            echo "nasa_degraded=true" >> $GITHUB_OUTPUT
            DEGRADED=true
            DEGRADATION_REASONS+=("NASA Compliance decreased by $(echo "$BASE_NASA - $PR_NASA" | bc -l | xargs printf "%.1f")%")
          else
            echo "nasa_degraded=false" >> $GITHUB_OUTPUT
          fi

          # Theater Score check (lower theater score is worse)
          if (( $(echo "$PR_THEATER < ($BASE_THEATER - $QUALITY_DEGRADATION_THRESHOLD)" | bc -l) )); then
            echo "theater_degraded=true" >> $GITHUB_OUTPUT
            DEGRADED=true
            DEGRADATION_REASONS+=("Theater score decreased by $(echo "$BASE_THEATER - $PR_THEATER" | bc -l | xargs printf "%.0f") points")
          else
            echo "theater_degraded=false" >> $GITHUB_OUTPUT
          fi

          # God Objects check (any increase is bad)
          if [ "$PR_GOD" -gt "$BASE_GOD" ]; then
            echo "god_degraded=true" >> $GITHUB_OUTPUT
            DEGRADED=true
            DEGRADATION_REASONS+=("God objects increased by $((PR_GOD - BASE_GOD))")
          else
            echo "god_degraded=false" >> $GITHUB_OUTPUT
          fi

          # Critical violations check (new metric)
          if [ "$PR_CRITICAL" -gt "$(echo "$BASE_CRITICAL + $CRITICAL_VIOLATION_THRESHOLD" | bc)" ]; then
            echo "critical_degraded=true" >> $GITHUB_OUTPUT
            DEGRADED=true
            DEGRADATION_REASONS+=("Critical violations increased by $((PR_CRITICAL - BASE_CRITICAL))")
          else
            echo "critical_degraded=false" >> $GITHUB_OUTPUT
          fi

          # Magic literals check (new metric)
          MAGIC_INCREASE=$((PR_MAGIC - BASE_MAGIC))
          if [ "$MAGIC_INCREASE" -gt "$MAGIC_LITERAL_THRESHOLD" ]; then
            echo "magic_degraded=true" >> $GITHUB_OUTPUT
            DEGRADED=true
            DEGRADATION_REASONS+=("Magic literals increased by $MAGIC_INCREASE")
          else
            echo "magic_degraded=false" >> $GITHUB_OUTPUT
          fi

          # Hardcoded paths check (new metric)
          HARDCODED_INCREASE=$((PR_HARDCODED - BASE_HARDCODED))
          if [ "$HARDCODED_INCREASE" -gt "50" ]; then
            echo "hardcoded_degraded=true" >> $GITHUB_OUTPUT
            DEGRADED=true
            DEGRADATION_REASONS+=("Hardcoded paths increased by $HARDCODED_INCREASE")
          else
            echo "hardcoded_degraded=false" >> $GITHUB_OUTPUT
          fi

          # Overall violation count check
          VIOLATION_INCREASE_PCT=$(echo "scale=2; (($PR_TOTAL - $BASE_TOTAL) * 100) / $BASE_TOTAL" | bc -l)
          if (( $(echo "$VIOLATION_INCREASE_PCT > 10" | bc -l) )); then
            echo "violations_degraded=true" >> $GITHUB_OUTPUT
            DEGRADED=true
            DEGRADATION_REASONS+=("Total violations increased by ${VIOLATION_INCREASE_PCT}%")
          else
            echo "violations_degraded=false" >> $GITHUB_OUTPUT
          fi

          # Coverage check (traditional)
          if (( $(echo "$PR_COVERAGE < ($BASE_COVERAGE - 2)" | bc -l) )); then
            echo "coverage_degraded=true" >> $GITHUB_OUTPUT
            DEGRADED=true
            DEGRADATION_REASONS+=("Test coverage decreased by $(echo "$BASE_COVERAGE - $PR_COVERAGE" | bc -l | xargs printf "%.1f")%")
          else
            echo "coverage_degraded=false" >> $GITHUB_OUTPUT
          fi

          # Set final degradation status
          echo "degraded=$DEGRADED" >> $GITHUB_OUTPUT

          # Log degradation summary
          if [ "$DEGRADED" = "true" ]; then
            echo "[FAIL] Quality degradation detected:"
            printf '%s\n' "${DEGRADATION_REASONS[@]}"
            echo "degradation_summary=$(IFS='|'; echo "${DEGRADATION_REASONS[*]}")" >> $GITHUB_OUTPUT
          else
            echo "[OK] No quality degradation detected"
            echo "degradation_summary=" >> $GITHUB_OUTPUT
          fi

          # Calculate improvement metrics
          NASA_CHANGE=$(echo "$PR_NASA - $BASE_NASA" | bc -l)
          THEATER_CHANGE=$(echo "$PR_THEATER - $BASE_THEATER" | bc -l)
          VIOLATION_CHANGE=$((PR_TOTAL - BASE_TOTAL))
          COVERAGE_CHANGE=$(echo "$PR_COVERAGE - $BASE_COVERAGE" | bc -l)

          echo "nasa_change=${NASA_CHANGE}" >> $GITHUB_OUTPUT
          echo "theater_change=${THEATER_CHANGE}" >> $GITHUB_OUTPUT
          echo "violation_change=${VIOLATION_CHANGE}" >> $GITHUB_OUTPUT
          echo "coverage_change=${COVERAGE_CHANGE}" >> $GITHUB_OUTPUT

      - name: Enhanced PR Comment with Comprehensive Metrics
        uses: actions/github-script@v7
        with:
          script: |
            // Get comprehensive metrics from new analyzer
            const baseNasa = parseFloat('${{ steps.base-metrics.outputs.nasa }}');
            const prNasa = parseFloat('${{ steps.pr-metrics.outputs.nasa }}');
            const baseTheater = parseInt('${{ steps.base-metrics.outputs.theater }}');
            const prTheater = parseInt('${{ steps.pr-metrics.outputs.theater }}');
            const baseGod = parseInt('${{ steps.base-metrics.outputs.god }}');
            const prGod = parseInt('${{ steps.pr-metrics.outputs.god }}');
            const baseCritical = parseInt('${{ steps.base-metrics.outputs.critical }}');
            const prCritical = parseInt('${{ steps.pr-metrics.outputs.critical }}');
            const baseMagic = parseInt('${{ steps.base-metrics.outputs.magic_literals }}');
            const prMagic = parseInt('${{ steps.pr-metrics.outputs.magic_literals }}');
            const baseHardcoded = parseInt('${{ steps.base-metrics.outputs.hardcoded_paths }}');
            const prHardcoded = parseInt('${{ steps.pr-metrics.outputs.hardcoded_paths }}');
            const baseTotal = parseInt('${{ steps.base-metrics.outputs.total_violations }}');
            const prTotal = parseInt('${{ steps.pr-metrics.outputs.total_violations }}');
            const baseCoverage = parseFloat('${{ steps.base-metrics.outputs.coverage }}');
            const prCoverage = parseFloat('${{ steps.pr-metrics.outputs.coverage }}');

            const degraded = '${{ steps.analysis.outputs.degraded }}' === 'true';
            const degradationSummary = '${{ steps.analysis.outputs.degradation_summary }}'.split('|').filter(s => s.trim());
            const analyzerVersion = '${{ steps.pr-metrics.outputs.analyzer_version }}';

            // Status indicators with enhanced logic
            const nasaIcon = prNasa >= (baseNasa - 5) ? '[OK] OK' : '[FAIL] DEGRADED';
            const theaterIcon = prTheater >= (baseTheater - 5) ? '[OK] OK' : '[FAIL] DEGRADED';
            const godIcon = prGod <= baseGod ? '[OK] OK' : '[FAIL] INCREASED';
            const criticalIcon = prCritical <= (baseCritical + 25) ? '[OK] OK' : '[FAIL] INCREASED';
            const magicIcon = (prMagic - baseMagic) <= 100 ? '[OK] OK' : '[FAIL] INCREASED';
            const hardcodedIcon = (prHardcoded - baseHardcoded) <= 50 ? '[OK] OK' : '[FAIL] INCREASED';
            const coverageIcon = prCoverage >= (baseCoverage - 2) ? '[OK] OK' : '[FAIL] DECREASED';

            // Calculate percentage changes
            const violationChangePct = baseTotal > 0 ? (((prTotal - baseTotal) * 100) / baseTotal).toFixed(1) : '0.0';

            const body = \`## Enhanced PR Quality Gate Analysis (Analyzer v2.0)

### [BAR_CHART] Core Quality Metrics
| Metric | Base | PR | Change | Status |
|--------|------|----|----|--------|
| [BUILDING] NASA POT10 Compliance | ${baseNasa.toFixed(1)}% | ${prNasa.toFixed(1)}% | ${(prNasa - baseNasa).toFixed(1)}% | ${nasaIcon} |
| [THEATER] Theater Score | ${baseTheater}/100 | ${prTheater}/100 | ${prTheater - baseTheater} | ${theaterIcon} |
| [CHART] Test Coverage | ${baseCoverage.toFixed(1)}% | ${prCoverage.toFixed(1)}% | ${(prCoverage - baseCoverage).toFixed(1)}% | ${coverageIcon} |

### [SEARCH] Detailed Violation Analysis
| Violation Type | Base | PR | Change | Status |
|----------------|------|----|----|--------|
| [FIRE] Critical Violations | ${baseCritical:,} | ${prCritical:,} | ${prCritical - baseCritical:+} | ${criticalIcon} |
| [LABEL] Magic Literals | ${baseMagic:,} | ${prMagic:,} | ${prMagic - baseMagic:+,} | ${magicIcon} |
| [FOLDER] Hardcoded Paths | ${baseHardcoded:,} | ${prHardcoded:,} | ${prHardcoded - baseHardcoded:+,} | ${hardcodedIcon} |
| [SCROLL] God Objects | ${baseGod} | ${prGod} | ${prGod - baseGod:+} | ${godIcon} |
| [BAR_CHART] Total Violations | ${baseTotal:,} | ${prTotal:,} | ${violationChangePct}% | ${parseFloat(violationChangePct) <= 10 ? '[OK] OK' : '[FAIL] HIGH'} |

### [TROPHY] Quality Gate Result
${degraded ?
  `[FAIL] **Quality Degradation Detected**\n\n**Issues Found:**\n${degradationSummary.map(reason => `- ${reason}`).join('\n')}\n\n[WARN] **Action Required:** Please address the quality issues before merging.` :
  `[OK] **No Quality Degradation**\n\nThis PR maintains or improves quality standards. Great work! [PARTY]`
}

### [WRENCH] Technical Details
- **Analyzer Version:** ${analyzerVersion}
- **Analysis Scope:** Comprehensive 20,185+ violation detection
- **Quality Thresholds:** NASA >=90%, Theater >=60, Critical <=50
- **Baseline NASA Score:** 58% -> **Target:** 90%+

---
*Enhanced by Unified Analyzer v2.0 with error-resilient design Enhanced by Unified Analyzer v2.0 with error-resilient design*`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

      - name: Enhanced Quality Gate Failure Report
        if: steps.analysis.outputs.degraded == 'true'
        run: |
          echo "[FAIL] [FAIL] PR degrades quality metrics with comprehensive analyzer"
          echo ""
          echo "[CHART] Quality Degradation Summary:"
          echo "${{ steps.analysis.outputs.degradation_summary }}" | tr '|' '\n'
          echo ""
          echo "[BAR_CHART] Detailed Comparison:"
          echo "  NASA Compliance: ${{ steps.base-metrics.outputs.nasa }}% -> ${{ steps.pr-metrics.outputs.nasa }}% (change: ${{ steps.analysis.outputs.nasa_change }}%)"
          echo "  Theater Score: ${{ steps.base-metrics.outputs.theater }} -> ${{ steps.pr-metrics.outputs.theater }} (change: ${{ steps.analysis.outputs.theater_change }})"
          echo "  God Objects: ${{ steps.base-metrics.outputs.god }} -> ${{ steps.pr-metrics.outputs.god }} (change: $(( ${{ steps.pr-metrics.outputs.god }} - ${{ steps.base-metrics.outputs.god }} )))"
          echo "  Critical Violations: ${{ steps.base-metrics.outputs.critical }} -> ${{ steps.pr-metrics.outputs.critical }} (change: $(( ${{ steps.pr-metrics.outputs.critical }} - ${{ steps.base-metrics.outputs.critical }} )))"
          echo "  Magic Literals: ${{ steps.base-metrics.outputs.magic_literals }} -> ${{ steps.pr-metrics.outputs.magic_literals }} (change: $(( ${{ steps.pr-metrics.outputs.magic_literals }} - ${{ steps.base-metrics.outputs.magic_literals }} )))"
          echo "  Hardcoded Paths: ${{ steps.base-metrics.outputs.hardcoded_paths }} -> ${{ steps.pr-metrics.outputs.hardcoded_paths }} (change: $(( ${{ steps.pr-metrics.outputs.hardcoded_paths }} - ${{ steps.base-metrics.outputs.hardcoded_paths }} )))"
          echo "  Total Violations: ${{ steps.base-metrics.outputs.total_violations }} -> ${{ steps.pr-metrics.outputs.total_violations }} (change: ${{ steps.analysis.outputs.violation_change }})"
          echo "  Test Coverage: ${{ steps.base-metrics.outputs.coverage }}% -> ${{ steps.pr-metrics.outputs.coverage }}% (change: ${{ steps.analysis.outputs.coverage_change }}%)"
          echo ""
          echo "[TARGET] Quality Thresholds:"
          echo "  NASA Compliance Degradation: >5% (threshold: ${{ env.QUALITY_DEGRADATION_THRESHOLD }}%)"
          echo "  Critical Violations Increase: >25 (threshold: ${{ env.CRITICAL_VIOLATION_THRESHOLD }})"
          echo "  Magic Literals Increase: >100 (threshold: ${{ env.MAGIC_LITERAL_THRESHOLD }})"
          echo ""
          echo "[WARN] Please address quality issues before merging this PR."
          exit 1

      - name: Upload Enhanced Analysis Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: enhanced-pr-quality-analysis-${{ github.event.number }}
          path: |
            base-comprehensive-analysis.json
            pr-comprehensive-analysis.json
            base-*.json
            pr-*.json
          retention-days: 30