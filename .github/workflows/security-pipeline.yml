name: Security Pipeline (Standardized)
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * 1'  # Weekly Monday 2 AM
  workflow_dispatch:
    inputs:
      security_scope:
        description: 'Security scan scope'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - sast_only
          - supply_chain_only

jobs:
  # Parallel security analysis matrix
  security-analysis:
    strategy:
      fail-fast: false
      matrix:
        analysis:
          - name: "sast"
            runner: "ubuntu-latest-4-core"
            timeout: 30
            priority: "critical"
          - name: "supply_chain"
            runner: "ubuntu-latest"
            timeout: 20
            priority: "high"
          - name: "secrets"
            runner: "ubuntu-latest"
            timeout: 15
            priority: "high"
    
    runs-on: ${{ matrix.analysis.runner }}
    name: "Security: ${{ matrix.analysis.name }}"
    timeout-minutes: ${{ matrix.analysis.timeout }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for secrets detection

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Create Security Artifacts Directory
      run: mkdir -p .claude/.artifacts/security

    - name: Install Security Dependencies
      run: |
        echo "Installing security analysis dependencies for ${{ matrix.analysis.name }}..."
        pip install --upgrade pip
        
        # Install basic requirements with error handling
        if [ -f requirements.txt ]; then
          echo "Installing basic requirements..."
          pip install -r requirements.txt || {
            echo "WARNING: Some basic requirements failed, continuing with security tools..."
          }
        fi
        
        # Install security tools with enhanced error handling and retries
        echo "Installing security tools for ${{ matrix.analysis.name }}..."
        
        install_with_retry() {
          local package=$1
          local max_attempts=3
          local attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt/$max_attempts: Installing $package..."
            if pip install "$package" --timeout=120; then
              echo "SUCCESS: Successfully installed $package"
              return 0
            else
              echo "FAILED: Failed to install $package (attempt $attempt/$max_attempts)"
              if [ $attempt -lt $max_attempts ]; then
                echo "Waiting 5 seconds before retry..."
                sleep 5
              fi
              attempt=$((attempt + 1))
            fi
          done
          
          echo "FAILED: Failed to install $package after $max_attempts attempts"
          return 1
        }
        
        # Tool-specific installations with fallbacks
        if [[ "${{ matrix.analysis.name }}" == "sast" ]]; then
          # Try to install SAST tools with fallbacks
          install_with_retry "bandit" || echo "WARNING: Bandit installation failed, will skip bandit analysis"
          install_with_retry "semgrep" || echo "WARNING: Semgrep installation failed, will skip semgrep analysis"
          
          # Verify installations
          echo "Verifying SAST tool installations..."
          bandit --version 2>/dev/null && echo "SUCCESS: Bandit available" || echo "FAILED: Bandit not available"
          semgrep --version 2>/dev/null && echo "SUCCESS: Semgrep available" || echo "FAILED: Semgrep not available"
          
        elif [[ "${{ matrix.analysis.name }}" == "supply_chain" ]]; then
          # Try to install supply chain tools with fallbacks
          install_with_retry "safety" || echo "WARNING: Safety installation failed, will skip safety analysis"
          install_with_retry "pip-audit" || echo "WARNING: Pip-audit installation failed, will skip pip-audit analysis"
          
          # Verify installations
          echo "Verifying supply chain tool installations..."
          safety --version 2>/dev/null && echo "SUCCESS: Safety available" || echo "FAILED: Safety not available"
          pip-audit --version 2>/dev/null && echo "SUCCESS: Pip-audit available" || echo "FAILED: Pip-audit not available"
          
        elif [[ "${{ matrix.analysis.name }}" == "secrets" ]]; then
          # Try to install secrets detection tools with fallbacks
          install_with_retry "detect-secrets" || echo "WARNING: Detect-secrets installation failed, will skip secrets analysis"
          
          # Verify installations
          echo "Verifying secrets tool installations..."
          detect-secrets --version 2>/dev/null && echo "SUCCESS: Detect-secrets available" || echo "FAILED: Detect-secrets not available"
        fi
        
        echo "SUCCESS: Security dependency installation completed (with potential fallbacks)"

    - name: Make Security Scripts Executable
      run: chmod +x .github/scripts/*.py

    - name: Run SAST Analysis
      if: matrix.analysis.name == 'sast'
      run: python .github/scripts/sast_analysis.py

    - name: Run Supply Chain Analysis
      if: matrix.analysis.name == 'supply_chain'
      run: python .github/scripts/supply_chain_analysis.py

    - name: Run Secrets Detection
      if: matrix.analysis.name == 'secrets'
      run: python .github/scripts/secrets_analysis.py

    - name: Upload Security Analysis Artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ${{ matrix.analysis.name }}-security-${{ github.run_number }}
        path: |
          .claude/.artifacts/security/${{ matrix.analysis.name }}_analysis.json

  # Security consolidation and quality gate
  security-consolidation:
    needs: security-analysis
    runs-on: ubuntu-latest-4-core
    name: "Security Consolidation & Quality Gates"
    timeout-minutes: 20
    if: always()
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Create Security Artifacts Directory
      run: mkdir -p .claude/.artifacts/security

    - name: Download All Security Artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./security-artifacts
        merge-multiple: true

    - name: Make Security Scripts Executable
      run: chmod +x .github/scripts/*.py

    - name: Consolidate Security Results
      run: python .github/scripts/security_consolidation.py

    - name: Security Quality Gate Decision
      run: python .github/scripts/security_gate_decision.py

    - name: Upload Consolidated Security Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: consolidated-security-report-${{ github.run_number }}
        path: |
          .claude/.artifacts/security/security_gates_report.json