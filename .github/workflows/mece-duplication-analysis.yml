name: MECE Duplication Analysis
on:
  push:
    branches: [main]
    paths:
      - 'analyzer/**'
      - 'src/**'
      - '**/*.py'
      - '**/*.ts'
      - '**/*.js'
  pull_request:
    branches: [main]
    paths:
      - 'analyzer/**'
      - 'src/**'
      - '**/*.py'
      - '**/*.ts'
      - '**/*.js'
  workflow_dispatch:
    inputs:
      trigger-reason:
        description: 'Reason for triggering analysis'
        required: false
        default: 'manual'

jobs:
  mece-analysis:
    runs-on: ubuntu-latest
    name: "MECE Duplication Analysis"
    timeout-minutes: 30
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        if [ -f setup.py ]; then
          pip install -e .
        fi

    - name: Create Artifacts Directory
      run: mkdir -p .claude/.artifacts

    - name: MECE Duplication Analysis
      run: |
        echo "Running MECE duplication analysis..."
        export PYTHONPATH="${GITHUB_WORKSPACE}/analyzer:${PYTHONPATH}"
        python .github/scripts/run_mece_analysis.py

    - name: Duplication Analysis Summary
      run: |
        if [ -f .claude/.artifacts/mece_analysis.json ]; then
          echo "=== MECE Duplication Analysis Summary ==="
          python -c "import json; data = json.load(open('.claude/.artifacts/mece_analysis.json', 'r')); mece_score = data.get('mece_score', 0); duplications = data.get('duplications', []); summary = data.get('analysis_summary', {}); recommendations = data.get('recommendations', []); print('MECE Score:', mece_score); print('Duplications Found:', len(duplications)); print('Files Analyzed:', summary.get('total_files_analyzed', 'N/A')); print('Duplicate Clusters:', summary.get('duplicate_clusters', 'N/A')); print('Similarity Threshold:', summary.get('similarity_threshold', 'N/A')); print('Recommendations:', len(recommendations)); print('WARNING: Analysis ran in fallback mode') if data.get('fallback') else None"
        else
          echo "ERROR: MECE analysis file not found"
          exit 1
        fi

    - name: Upload MECE Analysis
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: mece-analysis-${{ github.run_number }}
        path: |
          .claude/.artifacts/mece_analysis.json

    - name: MECE Quality Gate
      run: |
        echo "=== MECE Quality Gate ==="
        python -c "exec('''import json; import sys; data = json.load(open(\".claude/.artifacts/mece_analysis.json\", \"r\")); min_mece_score = 0.70; max_duplications = 10; max_high_similarity = 5; mece_score = data.get(\"mece_score\", 0); duplications = data.get(\"duplications\", []); high_similarity = sum(1 for dup in duplications if isinstance(dup, dict) and dup.get(\"similarity\", 0) > 0.9); failed = False; failed = True if mece_score < min_mece_score else (print(f\"SUCCESS: MECE score: {mece_score:.3f} >= {min_mece_score:.3f}\"), failed)[1]; failed = True if len(duplications) > max_duplications else (print(f\"SUCCESS: Total duplications: {len(duplications)} <= {max_duplications}\"), failed)[1]; failed = True if high_similarity > max_high_similarity else (print(f\"SUCCESS: High similarity duplications: {high_similarity} <= {max_high_similarity}\"), failed)[1]; print(f\"ERROR: MECE score: {mece_score:.3f} < {min_mece_score:.3f}\") if mece_score < min_mece_score else None; print(f\"ERROR: Total duplications: {len(duplications)} > {max_duplications}\") if len(duplications) > max_duplications else None; print(f\"ERROR: High similarity duplications: {high_similarity} > {max_high_similarity}\") if high_similarity > max_high_similarity else None; print(\"\\nWARNING: MECE quality gate has warnings\\nConsider refactoring duplicate code patterns\") if failed else print(\"\\nSUCCESS: MECE quality gate PASSED\")''')"