name: 'Production Deployment Pipeline'

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'package.json'
      - 'package-lock.json'
      - 'Dockerfile'
  pull_request:
    branches: [main]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'package.json'
      - 'package-lock.json'
      - 'Dockerfile'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - development
          - staging
          - production
      force_deploy:
        description: 'Force deployment (skip tests)'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.12'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  test:
    name: 'Run Tests & Quality Gates'
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Setup Python'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 'Install Node.js dependencies'
        run: npm ci

      - name: 'Install Python dependencies'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 'Run TypeScript compilation'
        run: npm run typecheck

      - name: 'Run linting'
        run: npm run lint

      - name: 'Run JavaScript tests'
        run: npm run test:js

      - name: 'Run Python tests'
        run: npm run test:py

      - name: 'Run security scan'
        run: npm run security

      - name: 'NASA POT10 compliance check'
        run: npm run compliance:nasa-pot10

      - name: 'Upload test results'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            .claude/.artifacts/
          retention-days: 30

  build:
    name: 'Build & Package'
    runs-on: ubuntu-latest
    needs: test
    if: github.event.inputs.force_deploy != 'true'
    timeout-minutes: 10

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Setup Docker Buildx'
        uses: docker/setup-buildx-action@v3

      - name: 'Login to Container Registry'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Extract metadata'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 'Build and push Docker image'
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: 'Deploy to Staging'
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment: staging
    timeout-minutes: 20

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Install dependencies'
        run: npm ci

      - name: 'Deploy to staging'
        run: |
          echo "Deploying to staging environment..."
          npm run deploy:staging
        env:
          IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
          ENVIRONMENT: staging

      - name: 'Run smoke tests'
        run: npm run test:smoke
        env:
          SMOKE_TEST_URL: ${{ vars.STAGING_URL }}

  deploy-production:
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    needs: [test, build, deploy-staging]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment: production
    timeout-minutes: 30

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Install dependencies'
        run: npm ci

      - name: 'Pre-deployment validation'
        run: |
          echo "Running pre-deployment validation..."
          npm run validate

      - name: 'Deploy to production'
        run: |
          echo "Deploying to production environment..."
          npm run deploy:production
        env:
          IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
          ENVIRONMENT: production

      - name: 'Post-deployment verification'
        run: |
          echo "Running post-deployment verification..."
          npm run test:smoke
        env:
          SMOKE_TEST_URL: ${{ vars.PRODUCTION_URL }}

      - name: 'Notify deployment success'
        if: success()
        run: |
          echo "Production deployment successful!"
          echo "Image: ${{ needs.build.outputs.image-tag }}"
          echo "Digest: ${{ needs.build.outputs.image-digest }}"

  security-scan:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    needs: build
    if: always()

    steps:
      - name: 'Run Trivy vulnerability scanner'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 'Upload Trivy scan results'
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'