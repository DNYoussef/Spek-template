name: Project Automation
on:
  issues:
    types: [opened, closed, assigned, labeled, unlabeled]
  pull_request:
    types: [opened, closed, merged, ready_for_review, converted_to_draft]
  pull_request_review:
    types: [submitted]
  workflow_dispatch:
    inputs:
      sync_all:
        description: 'Sync all items to project'
        required: false
        default: 'false'
        type: boolean

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PROJECT_ID: ${{ vars.GITHUB_PROJECT_ID }}

jobs:
  project-sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build project
        run: npm run build

      - name: Sync Item to Project
        if: github.event_name != 'workflow_dispatch'
        uses: actions/github-script@v7
        with:
          script: |
            const { GitHubProjectManager } = require('./dist/src/github/GitHubProjectManager.js');
            const { GitHubAuthentication } = require('./dist/src/github/GitHubAuthentication.js');
            const { GitHubAPIClient } = require('./dist/src/github/GitHubAPIClient.js');

            if (!process.env.PROJECT_ID) {
              console.log('No project ID configured');
              return;
            }

            const auth = GitHubAuthentication.createPersonalToken(process.env.GITHUB_TOKEN);
            const apiClient = new GitHubAPIClient(auth);
            const projectManager = new GitHubProjectManager(apiClient);

            const projectId = process.env.PROJECT_ID;
            let contentId, itemType, itemNumber;

            if (context.payload.issue) {
              contentId = context.payload.issue.node_id;
              itemType = 'Issue';
              itemNumber = context.payload.issue.number;
            } else if (context.payload.pull_request) {
              contentId = context.payload.pull_request.node_id;
              itemType = 'Pull Request';
              itemNumber = context.payload.pull_request.number;
            } else {
              console.log('No issue or PR in payload');
              return;
            }

            try {
              const item = await projectManager.addItemToProject(projectId, contentId);
              console.log(`Added ${itemType} #${itemNumber} to project`);

              let status = 'Todo';
              if (context.payload.action === 'closed') {
                status = 'Done';
              } else if (context.payload.action === 'assigned') {
                status = 'In Progress';
              } else if (context.payload.pull_request?.draft === false) {
                status = 'In Review';
              }

              await projectManager.moveItemToStatus(projectId, item.id, status);
              console.log(`Set status to: ${status}`);

            } catch (error) {
              console.error('Project sync failed:', error);
            }