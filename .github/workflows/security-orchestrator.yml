name: "Security Quality Gate Orchestrator"

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:
    inputs:
      security_level:
        description: 'Security scan level'
        required: false
        default: 'comprehensive'
        type: choice
        options:
          - comprehensive
          - quick
          - critical-only

permissions:
  contents: read
  security-events: write
  pull-requests: write
  actions: read
  checks: write

jobs:
  security-gate-validation:
    name: "Security Quality Gates"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    outputs:
      security-status: ${{ steps.validation.outputs.status }}
      critical-findings: ${{ steps.validation.outputs.critical_findings }}
      sarif-uploaded: ${{ steps.sarif-upload.outputs.uploaded }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install security tools
        run: |
          # Python security tools
          pip install bandit safety pip-audit
          
          # JavaScript security tools
          npm install -g npm-audit

          # Semgrep installation
          pip install semgrep
          
          # Create artifacts directory
          mkdir -p .claude/.artifacts/security/sarif

      - name: Install dependencies
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          
          if [ -f package.json ]; then
            npm install --production
          fi

      - name: Run Semgrep SAST Analysis
        id: semgrep
        run: |
          echo "Running Semgrep static analysis..."
          
          # Run with OWASP Top 10 rules
          semgrep \
            --config=p/owasp-top-ten \
            --config=p/security-audit \
            --json \
            --output=semgrep_results.json \
            --timeout=600 \
            --max-memory=4000 \
            --verbose \
            . || true
          
          # Generate SARIF output
          semgrep \
            --config=p/owasp-top-ten \
            --sarif \
            --output=.claude/.artifacts/security/sarif/semgrep-results.sarif \
            . || true
          
          echo "Semgrep analysis completed"

      - name: Run Bandit Python Security Analysis
        id: bandit
        run: |
          echo "Running Bandit Python security analysis..."
          
          # Find Python files
          if find . -name "*.py" -not -path "./node_modules/*" | head -1; then
            bandit \
              -r . \
              -f json \
              -o bandit_results.json \
              --skip B101,B601 \
              --exclude ./node_modules,./venv,./.venv \
              -ll || true
            
            echo "Bandit analysis completed"
          else
            echo "No Python files found, skipping Bandit"
          fi

      - name: Run Safety Dependency Vulnerability Check
        id: safety
        run: |
          echo "Running Safety dependency vulnerability check..."
          
          if [ -f requirements.txt ]; then
            safety check \
              --json \
              --output safety_results.json \
              --continue-on-error || true
            
            echo "Safety check completed"
          else
            echo "No requirements.txt found, skipping Safety check"
          fi

      - name: Run NPM Audit
        id: npm-audit
        run: |
          echo "Running NPM security audit..."
          
          if [ -f package.json ]; then
            npm audit \
              --audit-level=moderate \
              --json > npm_audit_results.json || true
            
            echo "NPM audit completed"
          else
            echo "No package.json found, skipping NPM audit"
          fi

      - name: Run pip-audit for Python Dependencies
        id: pip-audit
        run: |
          echo "Running pip-audit for Python dependencies..."
          
          if [ -f requirements.txt ]; then
            pip-audit \
              --format=json \
              --output=pip_audit_results.json \
              --require=requirements.txt || true
            
            echo "pip-audit completed"
          else
            echo "No requirements.txt found, skipping pip-audit"
          fi

      - name: Run Security Gate Validation
        id: validation
        run: |
          echo "Running comprehensive security gate validation..."
          
          # Run the security validator
          python scripts/security_validator.py
          
          # Capture results
          if [ -f .claude/.artifacts/security/security_validation_report.json ]; then
            OVERALL_STATUS=$(cat .claude/.artifacts/security/security_validation_report.json | jq -r '.executive_summary.overall_status')
            CRITICAL_FINDINGS=$(cat .claude/.artifacts/security/security_validation_report.json | jq -r '.executive_summary.critical_findings')
            
            echo "status=$OVERALL_STATUS" >> $GITHUB_OUTPUT
            echo "critical_findings=$CRITICAL_FINDINGS" >> $GITHUB_OUTPUT
            
            echo "Security validation status: $OVERALL_STATUS"
            echo "Critical findings: $CRITICAL_FINDINGS"
          else
            echo "status=UNKNOWN" >> $GITHUB_OUTPUT
            echo "critical_findings=0" >> $GITHUB_OUTPUT
          fi

      - name: Upload SARIF Results to GitHub Security Tab
        id: sarif-upload
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: .claude/.artifacts/security/sarif
          category: "security-orchestrator"
        continue-on-error: true

      - name: Check SARIF Upload Status
        run: |
          if [ "${{ steps.sarif-upload.outcome }}" == "success" ]; then
            echo "uploaded=true" >> $GITHUB_OUTPUT
            echo "‚úÖ SARIF results uploaded to GitHub Security tab"
          else
            echo "uploaded=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è  SARIF upload failed - results available as artifacts"
          fi

      - name: Upload Security Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: |
            .claude/.artifacts/security/
            *_results.json
            semgrep_results.json
            bandit_results.json
          retention-days: 30

      - name: Generate Security Summary
        if: always()
        run: |
          echo "## üõ°Ô∏è Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          
          if [ -f .claude/.artifacts/security/security_validation_report.json ]; then
            REPORT=".claude/.artifacts/security/security_validation_report.json"
            
            OVERALL_STATUS=$(cat $REPORT | jq -r '.executive_summary.overall_status')
            TOTAL_FINDINGS=$(cat $REPORT | jq -r '.executive_summary.total_findings')
            CRITICAL_FINDINGS=$(cat $REPORT | jq -r '.executive_summary.critical_findings')
            HIGH_FINDINGS=$(cat $REPORT | jq -r '.executive_summary.high_findings')
            GATES_PASSED=$(cat $REPORT | jq -r '.executive_summary.gates_passed')
            GATES_FAILED=$(cat $REPORT | jq -r '.executive_summary.gates_failed')
            
            if [ "$OVERALL_STATUS" = "PASS" ]; then
              echo "### ‚úÖ Security Gates: PASSED" >> $GITHUB_STEP_SUMMARY
            else
              echo "### ‚ùå Security Gates: FAILED" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Total Findings | $TOTAL_FINDINGS |" >> $GITHUB_STEP_SUMMARY
            echo "| Critical Findings | $CRITICAL_FINDINGS |" >> $GITHUB_STEP_SUMMARY
            echo "| High Findings | $HIGH_FINDINGS |" >> $GITHUB_STEP_SUMMARY
            echo "| Gates Passed | $GATES_PASSED |" >> $GITHUB_STEP_SUMMARY
            echo "| Gates Failed | $GATES_FAILED |" >> $GITHUB_STEP_SUMMARY
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Compliance Status" >> $GITHUB_STEP_SUMMARY
            
            SOC2_COMPLIANT=$(cat $REPORT | jq -r '.compliance_status.soc2_compliant')
            NIST_COMPLIANT=$(cat $REPORT | jq -r '.compliance_status.nist_compliant')
            PROD_READY=$(cat $REPORT | jq -r '.compliance_status.production_ready')
            
            echo "- SOC 2 Compliant: $([ "$SOC2_COMPLIANT" = "true" ] && echo "‚úÖ" || echo "‚ùå")" >> $GITHUB_STEP_SUMMARY
            echo "- NIST Compliant: $([ "$NIST_COMPLIANT" = "true" ] && echo "‚úÖ" || echo "‚ùå")" >> $GITHUB_STEP_SUMMARY
            echo "- Production Ready: $([ "$PROD_READY" = "true" ] && echo "‚úÖ" || echo "‚ùå")" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ö†Ô∏è Security validation report not found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Security Gate Status Check
        if: steps.validation.outputs.status == 'FAIL'
        run: |
          echo "‚ùå Security gates failed - blocking deployment"
          echo "Critical findings: ${{ steps.validation.outputs.critical_findings }}"
          exit 1

  codeql-analysis:
    name: "CodeQL Advanced Analysis"
    runs-on: ubuntu-latest
    timeout-minutes: 45
    permissions:
      actions: read
      contents: read
      security-events: write
      
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality
          config: |
            name: "Security CodeQL Config"
            disable-default-queries: false
            queries:
              - uses: security-extended
              - uses: security-and-quality
            query-filters:
              - exclude:
                  id: js/unused-local-variable

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  security-dashboard-update:
    name: "Update Security Dashboard"
    runs-on: ubuntu-latest
    needs: [security-gate-validation, codeql-analysis]
    if: always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Security Artifacts
        uses: actions/download-artifact@v4
        with:
          name: security-scan-results
          path: ./security-results/

      - name: Update Security Dashboard
        run: |
          echo "Updating security dashboard with latest results..."
          
          # Create dashboard update (placeholder for actual dashboard integration)
          mkdir -p .claude/.artifacts/dashboard
          
          cat > .claude/.artifacts/dashboard/security-status.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "overall_status": "${{ needs.security-gate-validation.outputs.security-status }}",
            "critical_findings": ${{ needs.security-gate-validation.outputs.critical-findings }},
            "sarif_uploaded": ${{ needs.security-gate-validation.outputs.sarif-uploaded }},
            "workflow_run_id": "${{ github.run_id }}",
            "commit_sha": "${{ github.sha }}"
          }
          EOF
          
          echo "Security dashboard updated"

  notify-security-team:
    name: "Security Team Notification"
    runs-on: ubuntu-latest
    needs: [security-gate-validation]
    if: needs.security-gate-validation.outputs.critical-findings > 0
    
    steps:
      - name: Create Security Issue
        uses: actions/github-script@v7
        with:
          script: |
            const criticalFindings = ${{ needs.security-gate-validation.outputs.critical-findings }};
            
            if (criticalFindings > 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `üö® Critical Security Findings Detected - ${criticalFindings} findings`,
                body: `
            ## üö® Critical Security Alert
            
            **Critical Findings:** ${criticalFindings}
            **Workflow:** ${{ github.workflow }}
            **Run ID:** ${{ github.run_id }}
            **Commit:** ${{ github.sha }}
            
            ### Immediate Actions Required:
            1. Review security scan results in the [Security tab](https://github.com/${{ github.repository }}/security)
            2. Address all critical security findings before deployment
            3. Re-run security validation after fixes
            
            ### Artifacts:
            - [Security Scan Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - SARIF files uploaded to Security tab
            
            **This issue was automatically created by the Security Orchestrator workflow.**
                `,
                labels: ['security', 'critical', 'automated']
              });
            }