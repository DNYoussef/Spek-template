{"dependencies": [{"name": "accelerate", "version": "1.10.0", "vulns": []}, {"name": "ai-village", "skip_reason": "Dependency not found on PyPI and could not be audited: ai-village (0.1.0)"}, {"name": "aider-chat", "version": "0.54.12", "vulns": []}, {"name": "aiofiles", "version": "23.2.1", "vulns": []}, {"name": "aiohappyeyeballs", "version": "2.6.1", "vulns": []}, {"name": "aiohttp", "version": "3.12.14", "vulns": []}, {"name": "aiosignal", "version": "1.4.0", "vulns": []}, {"name": "aiosqlite", "version": "0.21.0", "vulns": []}, {"name": "alabaster", "version": "0.7.16", "vulns": []}, {"name": "alembic", "version": "1.16.5", "vulns": []}, {"name": "altair", "version": "5.5.0", "vulns": []}, {"name": "amqp", "version": "5.2.0", "vulns": []}, {"name": "aniso8601", "version": "9.0.1", "vulns": []}, {"name": "annotated-types", "version": "0.7.0", "vulns": []}, {"name": "anthropic", "version": "0.64.0", "vulns": []}, {"name": "antlr4-python3-runtime", "version": "4.9.3", "vulns": []}, {"name": "anyio", "version": "4.4.0", "vulns": []}, {"name": "argon2-cffi", "version": "23.1.0", "vulns": []}, {"name": "argon2-cffi-bindings", "version": "21.2.0", "vulns": []}, {"name": "arrow", "version": "1.3.0", "vulns": []}, {"name": "arviz", "version": "0.20.0", "vulns": []}, {"name": "asteroid-filterbanks", "version": "0.4.0", "vulns": []}, {"name": "astroid", "version": "2.15.8", "vulns": []}, {"name": "asttokens", "version": "2.4.1", "vulns": []}, {"name": "async-generator", "version": "1.10", "vulns": []}, {"name": "async-lru", "version": "2.0.4", "vulns": []}, {"name": "asyncer", "version": "0.0.8", "vulns": []}, {"name": "asyncio", "version": "3.4.3", "vulns": []}, {"name": "attrs", "version": "24.3.0", "vulns": []}, {"name": "audioread", "version": "3.0.1", "vulns": []}, {"name": "authlib", "version": "1.6.0", "vulns": []}, {"name": "babel", "version": "2.16.0", "vulns": []}, {"name": "backoff", "version": "2.2.1", "vulns": []}, {"name": "bandit", "version": "1.8.6", "vulns": []}, {"name": "bcrypt", "version": "4.3.0", "vulns": []}, {"name": "beautifulsoup4", "version": "4.12.3", "vulns": []}, {"name": "billiard", "version": "4.2.0", "vulns": []}, {"name": "bitsandbytes", "version": "0.47.0", "vulns": []}, {"name": "black", "version": "23.12.1", "vulns": [{"id": "PYSEC-2024-48", "fix_versions": ["24.3.0"], "aliases": ["CVE-2024-21503"], "description": "Versions of the package black before 24.3.0 are vulnerable to Regular Expression Denial of Service (ReDoS) via the lines_with_leading_tabs_expanded function in the strings.py file. An attacker could exploit this vulnerability by crafting a malicious input that causes a denial of service.\r\rExploiting this vulnerability is possible when running Black on untrusted input, or if you habitually put thousands of leading tab characters in your docstrings."}]}, {"name": "bleach", "version": "6.1.0", "vulns": []}, {"name": "blinker", "version": "1.9.0", "vulns": []}, {"name": "blis", "version": "1.3.0", "vulns": []}, {"name": "bokeh", "version": "3.8.0", "vulns": []}, {"name": "boltons", "version": "21.0.0", "vulns": []}, {"name": "boolean-py", "version": "5.0", "vulns": []}, {"name": "bracex", "version": "2.6", "vulns": []}, {"name": "brotli", "version": "1.1.0", "vulns": []}, {"name": "bs4", "version": "0.0.1", "vulns": []}, {"name": "build", "version": "1.3.0", "vulns": []}, {"name": "cachecontrol", "version": "0.14.3", "vulns": []}, {"name": "cachetools", "version": "5.5.0", "vulns": []}, {"name": "catalogue", "version": "2.0.10", "vulns": []}, {"name": "celery", "version": "5.4.0", "vulns": []}, {"name": "cerebras-cloud-sdk", "version": "1.2.0", "vulns": []}, {"name": "certifi", "version": "2025.7.14", "vulns": []}, {"name": "cffi", "version": "1.17.0", "vulns": []}, {"name": "chardet", "version": "5.2.0", "vulns": []}, {"name": "charset-normalizer", "version": "3.4.1", "vulns": []}, {"name": "chromadb", "version": "1.0.20", "vulns": []}, {"name": "click", "version": "8.1.8", "vulns": []}, {"name": "click-didyoumean", "version": "0.3.1", "vulns": []}, {"name": "click-option-group", "version": "0.5.7", "vulns": []}, {"name": "click-plugins", "version": "1.1.1", "vulns": []}, {"name": "click-repl", "version": "0.3.0", "vulns": []}, {"name": "clifford", "version": "1.4.0", "vulns": []}, {"name": "cloudpathlib", "version": "0.22.0", "vulns": []}, {"name": "cloudpickle", "version": "3.0.0", "vulns": []}, {"name": "colorama", "version": "0.4.6", "vulns": []}, {"name": "coloredlogs", "version": "15.0.1", "vulns": []}, {"name": "colorlog", "version": "6.8.2", "vulns": []}, {"name": "comm", "version": "0.2.2", "vulns": []}, {"name": "community", "version": "1.0.0b1", "vulns": []}, {"name": "confection", "version": "0.1.5", "vulns": []}, {"name": "configargparse", "version": "1.7", "vulns": []}, {"name": "connascence-analyzer", "skip_reason": "Dependency not found on PyPI and could not be audited: connascence-analyzer (1.0.0)"}, {"name": "contourpy", "version": "1.3.1", "vulns": []}, {"name": "courlan", "version": "1.3.0", "vulns": []}, {"name": "coverage", "version": "7.6.4", "vulns": []}, {"name": "cryptography", "version": "45.0.7", "vulns": []}, {"name": "cycler", "version": "0.12.1", "vulns": []}, {"name": "cyclonedx-bom", "version": "7.0.0", "vulns": []}, {"name": "cyclonedx-python-lib", "version": "9.1.0", "vulns": []}, {"name": "cymem", "version": "2.0.11", "vulns": []}, {"name": "dask", "version": "2024.10.0", "vulns": []}, {"name": "dataclasses", "version": "0.6", "vulns": []}, {"name": "dataclasses-json", "version": "0.6.7", "vulns": []}, {"name": "datasets", "version": "4.0.0", "vulns": []}, {"name": "dateparser", "version": "1.2.0", "vulns": []}, {"name": "debugpy", "version": "1.8.7", "vulns": []}, {"name": "decorator", "version": "5.1.1", "vulns": []}, {"name": "defusedxml", "version": "0.7.1", "vulns": []}, {"name": "deprecated", "version": "1.2.14", "vulns": []}, {"name": "detect-secrets", "version": "1.5.0", "vulns": []}, {"name": "diff-match-patch", "version": "20230430", "vulns": []}, {"name": "dill", "version": "0.3.8", "vulns": []}, {"name": "dirtyjson", "version": "1.0.8", "vulns": []}, {"name": "diskcache", "version": "5.6.3", "vulns": []}, {"name": "distlib", "version": "0.3.8", "vulns": []}, {"name": "distro", "version": "1.9.0", "vulns": []}, {"name": "dnspython", "version": "2.6.1", "vulns": []}, {"name": "docker-pycreds", "version": "0.4.0", "vulns": []}, {"name": "docopt", "version": "0.6.2", "vulns": []}, {"name": "docstring-parser", "version": "0.15", "vulns": []}, {"name": "docutils", "version": "0.21.2", "vulns": []}, {"name": "docx2pdf", "version": "0.1.8", "vulns": []}, {"name": "dparse", "version": "0.6.4", "vulns": []}, {"name": "dspy", "version": "3.0.2", "vulns": []}, {"name": "duckduckgo-search", "skip_reason": "Dependency not found on PyPI and could not be audited: duckduckgo-search (6.2.11)"}, {"name": "durationpy", "version": "0.10", "vulns": []}, {"name": "einops", "version": "0.8.1", "vulns": []}, {"name": "elastic-transport", "version": "8.15.0", "vulns": []}, {"name": "elasticsearch", "version": "8.15.0", "vulns": []}, {"name": "email-validator", "version": "2.2.0", "vulns": []}, {"name": "evaluate", "version": "0.4.3", "vulns": []}, {"name": "exceptiongroup", "version": "1.2.2", "vulns": []}, {"name": "execnet", "version": "2.1.1", "vulns": []}, {"name": "executing", "version": "2.1.0", "vulns": []}, {"name": "face", "version": "24.0.0", "vulns": []}, {"name": "faiss-cpu", "version": "1.8.0.post1", "vulns": []}, {"name": "faker", "version": "18.13.0", "vulns": []}, {"name": "fakeredis", "version": "2.24.1", "vulns": []}, {"name": "fastapi", "version": "0.116.1", "vulns": []}, {"name": "fastapi-limiter", "version": "0.1.6", "vulns": []}, {"name": "fastjsonschema", "version": "2.20.0", "vulns": []}, {"name": "feedparser", "version": "6.0.10", "vulns": []}, {"name": "ffmpeg-python", "version": "0.2.0", "vulns": []}, {"name": "ffmpy", "version": "0.6.1", "vulns": []}, {"name": "filelock", "version": "3.16.1", "vulns": []}, {"name": "fire", "version": "0.5.0", "vulns": []}, {"name": "flake8", "version": "7.0.0", "vulns": []}, {"name": "flask", "version": "3.0.3", "vulns": []}, {"name": "flask-cors", "version": "4.0.0", "vulns": [{"id": "PYSEC-2024-71", "fix_versions": ["4.0.2"], "aliases": ["CVE-2024-6221"], "description": "A vulnerability in corydolphin/flask-cors up to version 4.0.1 allows the `Access-Control-Allow-Private-Network` CORS header to be set to true by default, without any configuration option. This behavior can expose private network resources to unauthorized external access, leading to significant security risks such as data breaches, unauthorized access to sensitive information, and potential network intrusions."}, {"id": "GHSA-84pr-m4jr-85g5", "fix_versions": ["4.0.1"], "aliases": ["CVE-2024-1681"], "description": "corydolphin/flask-cors is vulnerable to log injection when the log level is set to debug. An attacker can inject fake log entries into the log file by sending a specially crafted GET request containing a CRLF sequence in the request path. This vulnerability allows attackers to corrupt log files, potentially covering tracks of other attacks, confusing log post-processing tools, and forging log entries. The issue is due to improper output neutralization for logs."}, {"id": "GHSA-8vgw-p6qm-5gr7", "fix_versions": ["6.0.0"], "aliases": ["CVE-2024-6844"], "description": "A vulnerability in corydolphin/flask-cors version 5.0.1 allows for inconsistent CORS matching due to the handling of the '+' character in URL paths. The request.path is passed through the unquote_plus function, which converts the '+' character to a space ' '. This behavior leads to incorrect path normalization, causing potential mismatches in CORS configuration. As a result, endpoints may not be matched correctly to their CORS settings, leading to unexpected CORS policy application. This can cause unauthorized cross-origin access or block valid requests, creating security vulnerabilities and usability issues."}, {"id": "GHSA-43qf-4rqw-9q2g", "fix_versions": ["6.0.0"], "aliases": ["CVE-2024-6866"], "description": "corydolphin/flask-cors version 5.0.1 contains a vulnerability where the request path matching is case-insensitive due to the use of the `try_match` function, which is originally intended for matching hosts. This results in a mismatch because paths in URLs are case-sensitive, but the regex matching treats them as case-insensitive. This misconfiguration can lead to significant security vulnerabilities, allowing unauthorized origins to access paths meant to be restricted, resulting in data exposure and potential data leaks."}, {"id": "GHSA-7rxf-gvfg-47g4", "fix_versions": ["6.0.0"], "aliases": ["CVE-2024-6839"], "description": "corydolphin/flask-cors version 5.0.1 contains an improper regex path matching vulnerability. The plugin prioritizes longer regex patterns over more specific ones when matching paths, which can lead to less restrictive CORS policies being applied to sensitive endpoints. This mismatch in regex pattern priority allows unauthorized cross-origin access to sensitive data or functionality, potentially exposing confidential information and increasing the risk of unauthorized actions by malicious actors."}]}, {"name": "flask-jwt-extended", "version": "4.6.0", "vulns": []}, {"name": "flask-limiter", "version": "3.8.0", "vulns": []}, {"name": "flask-login", "version": "0.6.3", "vulns": []}, {"name": "flask-restful", "version": "0.3.10", "vulns": []}, {"name": "flask-sqlalchemy", "version": "3.1.1", "vulns": []}, {"name": "flask-testing", "version": "0.8.1", "vulns": []}, {"name": "flatbuffers", "version": "24.3.25", "vulns": []}, {"name": "flower", "version": "2.0.1", "vulns": []}, {"name": "fonttools", "version": "4.55.3", "vulns": []}, {"name": "fqdn", "version": "1.5.1", "vulns": []}, {"name": "frozenlist", "version": "1.4.1", "vulns": []}, {"name": "fsspec", "version": "2025.3.0", "vulns": []}, {"name": "future", "version": "1.0.0", "vulns": [{"id": "GHSA-xqrq-4mgf-ff32", "fix_versions": [], "aliases": ["CVE-2025-50817"], "description": "A vulnerability in Python-Future modules 0.14.0 and above allows for arbitrary code execution via the unintended import of a file named test.py. When the module is loaded, it automatically imports test.py, if present in the same directory or in the sys.path. This behavior can be exploited by an attacker who has the ability to write files to the server, allowing the execution of arbitrary code."}]}, {"name": "gepa", "version": "0.0.4", "vulns": []}, {"name": "gitdb", "version": "4.0.12", "vulns": []}, {"name": "gitpython", "version": "3.1.44", "vulns": []}, {"name": "glom", "version": "22.1.0", "vulns": []}, {"name": "google-ai-generativelanguage", "version": "0.6.4", "vulns": []}, {"name": "google-api-core", "version": "2.19.2", "vulns": []}, {"name": "google-api-python-client", "version": "2.143.0", "vulns": []}, {"name": "google-auth", "version": "2.34.0", "vulns": []}, {"name": "google-auth-httplib2", "version": "0.2.0", "vulns": []}, {"name": "google-generativeai", "version": "0.5.4", "vulns": []}, {"name": "googleapis-common-protos", "version": "1.65.0", "vulns": []}, {"name": "gputil", "version": "1.4.0", "vulns": []}, {"name": "gradio", "version": "5.44.1", "vulns": []}, {"name": "gradio-client", "version": "1.12.1", "vulns": []}, {"name": "greenlet", "version": "3.0.3", "vulns": []}, {"name": "grep-ast", "version": "0.3.3", "vulns": []}, {"name": "groovy", "version": "0.1.2", "vulns": []}, {"name": "groq", "version": "0.5.0", "vulns": []}, {"name": "grpcio", "version": "1.66.1", "vulns": []}, {"name": "grpcio-status", "version": "1.62.3", "vulns": []}, {"name": "grpcio-tools", "version": "1.62.3", "vulns": []}, {"name": "gunicorn", "version": "21.2.0", "vulns": [{"id": "GHSA-w3h3-4rj7-4ph4", "fix_versions": ["22.0.0"], "aliases": ["CVE-2024-1135"], "description": "Gunicorn fails to properly validate Transfer-Encoding headers, leading to HTTP Request Smuggling (HRS) vulnerabilities. By crafting requests with conflicting Transfer-Encoding headers, attackers can bypass security restrictions and access restricted endpoints. This issue is due to Gunicorn's handling of Transfer-Encoding headers, where it incorrectly processes requests with multiple, conflicting Transfer-Encoding headers, treating them as chunked regardless of the final encoding specified. This vulnerability has been shown to allow access to endpoints restricted by gunicorn. This issue has been addressed in version 22.0.0.  To be affected users must have a network path which does not filter out invalid requests. These users are advised to block access to restricted endpoints via a firewall or other mechanism if they are unable to update."}, {"id": "GHSA-hc5x-x2vx-497g", "fix_versions": ["23.0.0"], "aliases": ["CVE-2024-6827"], "description": "Gunicorn version 21.2.0 does not properly validate the value of the 'Transfer-Encoding' header as specified in the RFC standards, which leads to the default fallback method of 'Content-Length,' making it vulnerable to TE.CL request smuggling. This vulnerability can lead to cache poisoning, data exposure, session manipulation, SSRF, XSS, DoS, data integrity compromise, security bypass, information leakage, and business logic abuse."}]}, {"name": "gym", "version": "0.26.2", "vulns": []}, {"name": "gym-notices", "version": "0.0.8", "vulns": []}, {"name": "h11", "version": "0.14.0", "vulns": [{"id": "GHSA-vqfr-h8mv-ghfj", "fix_versions": ["0.16.0"], "aliases": ["CVE-2025-43859"], "description": "### Impact  A leniency in h11's parsing of line terminators in chunked-coding message bodies can lead to request smuggling vulnerabilities under certain conditions.  ### Details  HTTP/1.1 Chunked-Encoding bodies are formatted as a sequence of \"chunks\", each of which consists of:  - chunk length - `\\r\\n` - `length` bytes of content - `\\r\\n`  In versions of h11 up to 0.14.0, h11 instead parsed them as:  - chunk length - `\\r\\n` - `length` bytes of content - any two bytes  i.e. it did not validate that the trailing `\\r\\n` bytes were correct, and if you put 2 bytes of garbage there it would be accepted, instead of correctly rejecting the body as malformed.  By itself this is harmless. However, suppose you have a proxy or reverse-proxy that tries to analyze HTTP requests, and your proxy has a _different_ bug in parsing Chunked-Encoding, acting as if the format is:  - chunk length - `\\r\\n` - `length` bytes of content - more bytes of content, as many as it takes until you find a `\\r\\n`  For example, [pound](https://github.com/graygnuorg/pound/pull/43) had this bug -- it can happen if an implementer uses a generic \"read until end of line\" helper to consumes the trailing `\\r\\n`.  In this case, h11 and your proxy may both accept the same stream of bytes, but interpret them differently. For example, consider the following HTTP request(s) (assume all line breaks are `\\r\\n`):  ``` GET /one HTTP/1.1 Host: localhost Transfer-Encoding: chunked  5 AAAAAXX2 45 0  GET /two HTTP/1.1 Host: localhost Transfer-Encoding: chunked  0 ```  Here h11 will interpret it as two requests, one with body `AAAAA45` and one with an empty body, while our hypothetical buggy proxy will interpret it as a single request, with body `AAAAXX20\\r\\n\\r\\nGET /two ...`. And any time two HTTP processors both accept the same string of bytes but interpret them differently, you have the conditions for a \"request smuggling\" attack. For example, if `/two` is a dangerous endpoint and the job of the reverse proxy is to stop requests from getting there, then an attacker could use a bytestream like the above to circumvent this protection.  Even worse, if our buggy reverse proxy receives two requests from different users:  ``` GET /one HTTP/1.1 Host: localhost Transfer-Encoding: chunked  5 AAAAAXX999 0 ```  ``` GET /two HTTP/1.1 Host: localhost Cookie: SESSION_KEY=abcdef... ```  ...it will consider the first request to be complete and valid, and send both on to the h11-based web server over the same socket. The server will then see the two concatenated requests, and interpret them as _one_ request to `/one` whose body includes `/two`'s session key, potentially allowing one user to steal another's credentials.  ### Patches  Fixed in h11 0.15.0.  ### Workarounds  Since exploitation requires the combination of buggy h11 with a buggy (reverse) proxy, fixing either component is sufficient to mitigate this issue.  ### Credits  Reported by Jeppe Bonde Weikop on 2025-01-09."}]}, {"name": "h2", "version": "4.1.0", "vulns": [{"id": "GHSA-847f-9342-265h", "fix_versions": ["4.3.0"], "aliases": ["CVE-2025-57804"], "description": "### Summary  HTTP/2 request splitting vulnerability allows attackers to perform request smuggling attacks by injecting CRLF characters into headers. This occurs when servers downgrade HTTP/2 requests to HTTP/1.1 without properly validating header names/values, enabling attackers to manipulate request boundaries and bypass security controls."}]}, {"name": "h5netcdf", "version": "1.4.0", "vulns": []}, {"name": "h5py", "version": "3.12.1", "vulns": []}, {"name": "halo", "version": "0.0.31", "vulns": []}, {"name": "hpack", "version": "4.0.0", "vulns": []}, {"name": "html2pdf", "version": "0.1", "vulns": []}, {"name": "htmldate", "version": "1.8.1", "vulns": []}, {"name": "httpcore", "version": "1.0.5", "vulns": []}, {"name": "httplib2", "version": "0.22.0", "vulns": []}, {"name": "httptools", "version": "0.6.4", "vulns": []}, {"name": "httpx", "version": "0.27.2", "vulns": []}, {"name": "httpx-sse", "version": "0.4.1", "vulns": []}, {"name": "huggingface-hub", "version": "0.34.4", "vulns": []}, {"name": "humanfriendly", "version": "10.0", "vulns": []}, {"name": "humanize", "version": "4.10.0", "vulns": []}, {"name": "hyperframe", "version": "6.0.1", "vulns": []}, {"name": "hyperpyyaml", "version": "1.2.2", "vulns": []}, {"name": "hypothesis", "version": "6.138.2", "vulns": []}, {"name": "ibm-cloud-sdk-core", "version": "3.22.0", "vulns": []}, {"name": "ibm-platform-services", "version": "0.59.0", "vulns": []}, {"name": "idna", "version": "3.10", "vulns": []}, {"name": "imageio", "version": "2.35.1", "vulns": []}, {"name": "imagesize", "version": "1.4.1", "vulns": []}, {"name": "importlib-metadata", "version": "7.1.0", "vulns": []}, {"name": "importlib-resources", "version": "6.4.4", "vulns": []}, {"name": "iniconfig", "version": "2.0.0", "vulns": []}, {"name": "iopath", "version": "0.1.10", "vulns": []}, {"name": "ipykernel", "version": "6.29.5", "vulns": []}, {"name": "ipython", "version": "8.29.0", "vulns": []}, {"name": "ipywidgets", "version": "8.1.5", "vulns": []}, {"name": "isoduration", "version": "20.11.0", "vulns": []}, {"name": "isort", "version": "5.13.2", "vulns": []}, {"name": "itsdangerous", "version": "2.1.2", "vulns": []}, {"name": "jaraco-classes", "version": "3.4.0", "vulns": []}, {"name": "jaraco-context", "version": "6.0.1", "vulns": []}, {"name": "jaraco-functools", "version": "4.1.0", "vulns": []}, {"name": "jedi", "version": "0.19.1", "vulns": []}, {"name": "jinja2", "version": "3.1.5", "vulns": [{"id": "GHSA-cpwx-vrp4-4pq7", "fix_versions": ["3.1.6"], "aliases": ["CVE-2025-27516"], "description": "An oversight in how the Jinja sandboxed environment interacts with the `|attr` filter allows an attacker that controls the content of a template to execute arbitrary Python code.  To exploit the vulnerability, an attacker needs to control the content of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates.  Jinja's sandbox does catch calls to `str.format` and ensures they don't escape the sandbox. However, it's possible to use the `|attr` filter to get a reference to a string's plain format method, bypassing the sandbox. After the fix, the `|attr` filter no longer bypasses the environment's attribute lookup."}]}, {"name": "jiter", "version": "0.5.0", "vulns": []}, {"name": "joblib", "version": "1.4.2", "vulns": []}, {"name": "json-repair", "version": "0.50.0", "vulns": []}, {"name": "json5", "version": "0.9.25", "vulns": []}, {"name": "jsonpatch", "version": "1.33", "vulns": []}, {"name": "jsonpointer", "version": "3.0.0", "vulns": []}, {"name": "jsonschema", "version": "4.23.0", "vulns": []}, {"name": "jsonschema-specifications", "version": "2024.10.1", "vulns": []}, {"name": "julius", "version": "0.2.7", "vulns": []}, {"name": "jupyter", "version": "1.1.1", "vulns": []}, {"name": "jupyter-client", "version": "8.6.3", "vulns": []}, {"name": "jupyter-console", "version": "6.6.3", "vulns": []}, {"name": "jupyter-core", "version": "5.7.2", "vulns": [{"id": "GHSA-33p9-3p43-82vq", "fix_versions": ["5.8.1"], "aliases": ["CVE-2025-30167"], "description": "## Impact  On Windows, the shared `%PROGRAMDATA%` directory is searched for configuration files (`SYSTEM_CONFIG_PATH` and `SYSTEM_JUPYTER_PATH`), which may allow users to create configuration files affecting other users.  Only shared Windows systems with multiple users and unprotected `%PROGRAMDATA%` are affected.  ## Mitigations  - upgrade to `jupyter_core>=5.8.1` (5.8.0 is patched but breaks `jupyter-server`) , or - as administrator, modify the permissions on the `%PROGRAMDATA%` directory so it is not writable by unauthorized users, or - as administrator, create the `%PROGRAMDATA%\\jupyter` directory with appropriately restrictive permissions, or - as user or administrator, set the `%PROGRAMDATA%` environment variable to a directory with appropriately restrictive permissions (e.g. controlled by administrators _or_ the current user)  ## Credit  Reported via Trend Micro Zero Day Initiative as ZDI-CAN-25932"}]}, {"name": "jupyter-events", "version": "0.10.0", "vulns": []}, {"name": "jupyter-lsp", "version": "2.2.5", "vulns": []}, {"name": "jupyter-server", "version": "2.14.2", "vulns": []}, {"name": "jupyter-server-terminals", "version": "0.5.3", "vulns": []}, {"name": "jupyterlab", "version": "4.2.5", "vulns": []}, {"name": "jupyterlab-pygments", "version": "0.3.0", "vulns": []}, {"name": "jupyterlab-server", "version": "2.27.3", "vulns": []}, {"name": "jupyterlab-widgets", "version": "3.0.13", "vulns": []}, {"name": "justext", "version": "3.0.1", "vulns": []}, {"name": "keyring", "version": "25.5.0", "vulns": []}, {"name": "kiwisolver", "version": "1.4.8", "vulns": []}, {"name": "kombu", "version": "5.4.0", "vulns": []}, {"name": "kubernetes", "version": "33.1.0", "vulns": []}, {"name": "langchain", "version": "0.3.27", "vulns": []}, {"name": "langchain-community", "version": "0.3.29", "vulns": []}, {"name": "langchain-core", "version": "0.3.75", "vulns": []}, {"name": "langchain-experimental", "version": "0.0.64", "vulns": []}, {"name": "langchain-text-splitters", "version": "0.3.11", "vulns": []}, {"name": "langcodes", "version": "3.5.0", "vulns": []}, {"name": "langdetect", "version": "1.0.9", "vulns": []}, {"name": "langroid", "version": "0.16.1", "vulns": [{"id": "GHSA-22c2-9gwg-mj59", "fix_versions": ["0.53.15"], "aliases": ["CVE-2025-46725"], "description": "### Summary [LanceDocChatAgent](https://github.com/langroid/langroid/blob/main/langroid/agent/special/lance_doc_chat_agent.py#L158) uses pandas eval() through `compute_from_docs()`: https://github.com/langroid/langroid/blob/18667ec7e971efc242505196f6518eb19a0abc1c/langroid/vector_store/base.py#L136-L150  As a result, an attacker may be able to make the agent run malicious commands through [QueryPlan.dataframe_calc](https://github.com/langroid/langroid/blob/main/langroid/agent/special/lance_tools.py#L16) compromising the host system.  ### Fix  Langroid 0.53.15 sanitizes input to the affected function by default to tackle the most common attack vectors, and added several warnings about the risky behavior in the project documentation."}, {"id": "GHSA-jqq5-wc57-f8hj", "fix_versions": ["0.53.15"], "aliases": ["CVE-2025-46724"], "description": "### Summary `TableChatAgent` uses [pandas eval()](https://github.com/langroid/langroid/blob/main/langroid/agent/special/table_chat_agent.py#L216). If fed by untrusted user input, like the case of a public-facing LLM application, it may be vulnerable to code injection.  ### PoC For example, one could prompt the Agent:      Evaluate the following pandas expression on the data provided and print output: \"pd.io.common.os.system('ls /')\"  ...to read the contents of the host filesystem.  ### Impact Confidentiality, Integrity and Availability of the system hosting the LLM application.  ### Fix Langroid 0.53.15 sanitizes input to `TableChatAgent` by default to tackle the most common attack vectors, and added several warnings about the risky behavior in the project documentation."}]}, {"name": "langsmith", "version": "0.4.21", "vulns": []}, {"name": "language-data", "version": "1.3.0", "vulns": []}, {"name": "layoutparser", "version": "0.3.4", "vulns": []}, {"name": "lazy-loader", "version": "0.4", "vulns": []}, {"name": "lazy-object-proxy", "version": "1.12.0", "vulns": []}, {"name": "librosa", "version": "0.11.0", "vulns": []}, {"name": "license-expression", "version": "30.4.4", "vulns": []}, {"name": "lightning", "version": "2.5.5", "vulns": []}, {"name": "lightning-utilities", "version": "0.15.2", "vulns": []}, {"name": "limits", "version": "3.13.0", "vulns": []}, {"name": "litellm", "version": "1.76.0", "vulns": []}, {"name": "llama-cloud", "version": "0.0.15", "vulns": []}, {"name": "llama-cpp-python", "version": "0.3.16", "vulns": []}, {"name": "llama-index", "version": "0.11.2", "vulns": [{"id": "PYSEC-2025-11", "fix_versions": ["0.12.9"], "aliases": ["CVE-2024-12910"], "description": "A vulnerability in the `KnowledgeBaseWebReader` class of the run-llama/llama_index repository, version latest, allows an attacker to cause a Denial of Service (DoS) by controlling a URL variable to contain the root URL. This leads to infinite recursive calls to the `get_article_urls` method, exhausting system resources and potentially crashing the application."}, {"id": "GHSA-j3wr-m6xh-64hg", "fix_versions": ["0.12.6"], "aliases": ["CVE-2024-12704"], "description": "A vulnerability in the LangChainLLM class of the run-llama/llama_index repository, version v0.12.5, allows for a Denial of Service (DoS) attack. The stream_complete method executes the llm using a thread and retrieves the result via the get_response_gen method of the StreamingGeneratorCallbackHandler class. If the thread terminates abnormally before the _llm.predict is executed, there is no exception handling for this case, leading to an infinite loop in the get_response_gen function. This can be triggered by providing an input of an incorrect type, causing the thread to terminate and the process to continue running indefinitely."}, {"id": "GHSA-jmgm-gx32-vp4w", "fix_versions": ["0.12.3"], "aliases": ["CVE-2024-12911"], "description": "A vulnerability in the `default_jsonalyzer` function of the `JSONalyzeQueryEngine` in the run-llama/llama_index repository allows for SQL injection via prompt injection. This can lead to arbitrary file creation and Denial-of-Service (DoS) attacks. The vulnerability affects the latest version and is fixed in version 0.12.3."}, {"id": "GHSA-v3c8-3pr6-gr7p", "fix_versions": ["0.12.28"], "aliases": ["CVE-2025-1793"], "description": "Multiple vector store integrations in run-llama/llama_index version v0.12.21 have SQL injection vulnerabilities. These vulnerabilities allow an attacker to read and write data using SQL, potentially leading to unauthorized access to data of other users depending on the usage of the llama-index library in a web application."}, {"id": "GHSA-5hq9-5r78-2gjh", "fix_versions": ["0.12.41"], "aliases": ["CVE-2025-6211"], "description": "A vulnerability in the DocugamiReader class of the run-llama/llama_index repository, up to but excluding version 0.12.41, involves the use of MD5 hashing to generate IDs for document chunks. This approach leads to hash collisions when structurally distinct chunks contain identical text, resulting in one chunk overwriting another. This can cause loss of semantically or legally important document content, breakage of parent-child chunk hierarchies, and inaccurate or hallucinated responses in AI outputs. The issue is resolved in version 0.3.1."}]}, {"name": "llama-index-agent-openai", "version": "0.3.0", "vulns": []}, {"name": "llama-index-cli", "version": "0.3.0", "vulns": [{"id": "GHSA-g99h-56mw-8263", "fix_versions": ["0.4.1"], "aliases": ["CVE-2025-1753"], "description": "LLama-Index CLI prior to v0.4.1, corresponding to LLama-Index prior to v0.12.21, contains an OS command injection vulnerability. The vulnerability arises from the improper handling of the `--files` argument, which is directly passed into `os.system`. An attacker who controls the content of this argument can inject and execute arbitrary shell commands. This vulnerability can be exploited locally if the attacker has control over the CLI arguments, and remotely if a web application calls the LLama-Index CLI with a user-controlled filename. This issue can lead to arbitrary code execution on the affected system."}]}, {"name": "llama-index-core", "version": "0.11.2", "vulns": [{"id": "GHSA-3wxx-q3gv-pvvv", "fix_versions": ["0.12.38"], "aliases": ["CVE-2025-5472"], "description": "The JSONReader in run-llama/llama_index versions 0.12.28 is vulnerable to a stack overflow due to uncontrolled recursive JSON parsing. This vulnerability allows attackers to trigger a Denial of Service (DoS) by submitting deeply nested JSON structures, leading to a RecursionError and crashing applications. The root cause is the unsafe recursive traversal design and lack of depth validation, which makes the JSONReader susceptible to stack overflow when processing deeply nested JSON. This impacts the availability of services, making them unreliable and disrupting workflows. The issue is resolved in version 0.12.38."}, {"id": "GHSA-7753-xrfw-ch36", "fix_versions": ["0.12.38"], "aliases": ["CVE-2025-5302"], "description": "A denial of service vulnerability exists in the JSONReader component of the run-llama/llama_index repository, specifically in version v0.12.37. The vulnerability is caused by uncontrolled recursion when parsing deeply nested JSON files, which can lead to Python hitting its maximum recursion depth limit. This results in high resource consumption and potential crashes of the Python process. The issue is resolved in version 0.12.38."}]}, {"name": "llama-index-embeddings-openai", "version": "0.2.3", "vulns": []}, {"name": "llama-index-indices-managed-llama-cloud", "version": "0.3.0", "vulns": []}, {"name": "llama-index-legacy", "version": "0.9.48.post3", "vulns": []}, {"name": "llama-index-llms-openai", "version": "0.2.0", "vulns": []}, {"name": "llama-index-multi-modal-llms-openai", "version": "0.2.0", "vulns": []}, {"name": "llama-index-program-openai", "version": "0.2.0", "vulns": []}, {"name": "llama-index-question-gen-openai", "version": "0.2.0", "vulns": []}, {"name": "llama-index-readers-file", "version": "0.2.0", "vulns": []}, {"name": "llama-index-readers-llama-parse", "version": "0.2.0", "vulns": []}, {"name": "llama-parse", "version": "0.5.0", "vulns": []}, {"name": "llmsherpa", "version": "0.1.4", "vulns": []}, {"name": "llvmlite", "version": "0.43.0", "vulns": []}, {"name": "locket", "version": "1.0.0", "vulns": []}, {"name": "log-symbols", "version": "0.0.14", "vulns": []}, {"name": "lxml", "version": "4.9.4", "vulns": []}, {"name": "lxml-html-clean", "version": "0.2.0", "vulns": [{"id": "PYSEC-2024-160", "fix_versions": ["0.4.0"], "aliases": ["CVE-2024-52595", "GHSA-5jfw-gq64-q45f"], "description": "lxml_html_clean is a project for HTML cleaning functionalities copied from `lxml.html.clean`. Prior to version 0.4.0, the HTML Parser in lxml does not properly handle context-switching for special HTML tags such as `<svg>`, `<math>` and `<noscript>`. This behavior deviates from how web browsers parse and interpret such tags. Specifically, content in CSS comments is ignored by lxml_html_clean but may be interpreted differently by web browsers, enabling malicious scripts to bypass the cleaning process. This vulnerability could lead to Cross-Site Scripting (XSS) attacks, compromising the security of users relying on lxml_html_clean in default configuration for sanitizing untrusted HTML content. Users employing the HTML cleaner in a security-sensitive context should upgrade to lxml 0.4.0, which addresses this issue. As a temporary mitigation, users can configure lxml_html_clean with the following settings to prevent the exploitation of this vulnerability. Via `remove_tags`, one may specify tags to remove - their content is moved to their parents' tags. Via `kill_tags`, one may specify tags to be removed completely. Via `allow_tags`, one may restrict the set of permissible tags, excluding context-switching tags like `<svg>`, `<math>` and `<noscript>`."}]}, {"name": "lz4", "version": "4.4.4", "vulns": []}, {"name": "magicattr", "version": "0.1.6", "vulns": []}, {"name": "mako", "version": "1.3.5", "vulns": []}, {"name": "mando", "version": "0.6.4", "vulns": []}, {"name": "marisa-trie", "version": "1.3.1", "vulns": []}, {"name": "markdown-it-py", "version": "3.0.0", "vulns": []}, {"name": "markupsafe", "version": "3.0.2", "vulns": []}, {"name": "marshmallow", "version": "3.22.0", "vulns": []}, {"name": "matplotlib", "version": "3.10.0", "vulns": []}, {"name": "matplotlib-inline", "version": "0.1.7", "vulns": []}, {"name": "mccabe", "version": "0.7.0", "vulns": []}, {"name": "mcts", "version": "1.0.4", "vulns": []}, {"name": "mdurl", "version": "0.1.2", "vulns": []}, {"name": "memory-profiler", "version": "0.61.0", "vulns": []}, {"name": "mistune", "version": "3.0.2", "vulns": []}, {"name": "mmh3", "version": "5.2.0", "vulns": []}, {"name": "more-itertools", "version": "10.4.0", "vulns": []}, {"name": "mpmath", "version": "1.3.0", "vulns": []}, {"name": "msgpack", "version": "1.0.8", "vulns": []}, {"name": "multidict", "version": "6.0.5", "vulns": []}, {"name": "multiprocess", "version": "0.70.16", "vulns": []}, {"name": "murmurhash", "version": "1.0.13", "vulns": []}, {"name": "mypy", "version": "1.8.0", "vulns": []}, {"name": "mypy-extensions", "version": "1.0.0", "vulns": []}, {"name": "narwhals", "version": "1.21.1", "vulns": []}, {"name": "nbclient", "version": "0.10.0", "vulns": []}, {"name": "nbconvert", "version": "7.16.4", "vulns": []}, {"name": "nbformat", "version": "5.10.4", "vulns": []}, {"name": "nbsphinx", "version": "0.9.5", "vulns": []}, {"name": "neo4j", "version": "5.24.0", "vulns": []}, {"name": "nest-asyncio", "version": "1.6.0", "vulns": []}, {"name": "networkx", "version": "3.5", "vulns": []}, {"name": "nh3", "version": "0.2.20", "vulns": []}, {"name": "nltk", "version": "3.9.1", "vulns": []}, {"name": "notebook", "version": "7.2.2", "vulns": []}, {"name": "notebook-shim", "version": "0.2.4", "vulns": []}, {"name": "numba", "version": "0.60.0", "vulns": []}, {"name": "numpy", "version": "1.26.4", "vulns": []}, {"name": "oauthlib", "version": "3.2.2", "vulns": []}, {"name": "ollama", "version": "0.3.2", "vulns": []}, {"name": "omegaconf", "version": "2.3.0", "vulns": []}, {"name": "onnxruntime", "version": "1.17.1", "vulns": []}, {"name": "openai", "version": "1.101.0", "vulns": []}, {"name": "openai-whisper", "version": "20231117", "vulns": []}, {"name": "opencv-python", "version": "4.10.0.84", "vulns": []}, {"name": "opentelemetry-api", "version": "1.25.0", "vulns": []}, {"name": "opentelemetry-exporter-otlp-proto-common", "version": "1.25.0", "vulns": []}, {"name": "opentelemetry-exporter-otlp-proto-grpc", "version": "1.36.0", "vulns": []}, {"name": "opentelemetry-exporter-otlp-proto-http", "version": "1.25.0", "vulns": []}, {"name": "opentelemetry-instrumentation", "version": "0.46b0", "vulns": []}, {"name": "opentelemetry-instrumentation-requests", "version": "0.46b0", "vulns": []}, {"name": "opentelemetry-proto", "version": "1.25.0", "vulns": []}, {"name": "opentelemetry-sdk", "version": "1.25.0", "vulns": []}, {"name": "opentelemetry-semantic-conventions", "version": "0.46b0", "vulns": []}, {"name": "opentelemetry-util-http", "version": "0.46b0", "vulns": []}, {"name": "optimum", "version": "1.17.1", "vulns": []}, {"name": "optuna", "version": "4.0.0", "vulns": []}, {"name": "ordered-set", "version": "4.1.0", "vulns": []}, {"name": "orjson", "version": "3.10.7", "vulns": []}, {"name": "overrides", "version": "7.7.0", "vulns": []}, {"name": "packageurl-python", "version": "0.17.5", "vulns": []}, {"name": "packaging", "version": "24.2", "vulns": []}, {"name": "pandas", "version": "2.2.3", "vulns": []}, {"name": "pandocfilters", "version": "1.5.1", "vulns": []}, {"name": "parso", "version": "0.8.4", "vulns": []}, {"name": "partd", "version": "1.4.2", "vulns": []}, {"name": "passlib", "version": "1.7.4", "vulns": []}, {"name": "pathspec", "version": "0.12.1", "vulns": []}, {"name": "patsy", "version": "1.0.1", "vulns": []}, {"name": "pbr", "version": "6.1.0", "vulns": []}, {"name": "pdf2image", "version": "1.17.0", "vulns": []}, {"name": "pdfkit", "version": "1.0.0", "vulns": []}, {"name": "pdfminer-six", "version": "20231228", "vulns": []}, {"name": "pdfplumber", "version": "0.11.4", "vulns": []}, {"name": "peewee", "version": "3.18.2", "vulns": []}, {"name": "peft", "version": "0.17.1", "vulns": []}, {"name": "pexpect", "version": "4.9.0", "vulns": []}, {"name": "pillow", "version": "11.3.0", "vulns": []}, {"name": "pip", "version": "25.2", "vulns": []}, {"name": "pip-api", "version": "0.0.34", "vulns": []}, {"name": "pip-audit", "version": "2.9.0", "vulns": []}, {"name": "pip-requirements-parser", "version": "32.0.1", "vulns": []}, {"name": "pkginfo", "version": "1.12.0", "vulns": []}, {"name": "platformdirs", "version": "4.2.2", "vulns": []}, {"name": "plotly", "version": "5.24.1", "vulns": []}, {"name": "pluggy", "version": "1.5.0", "vulns": []}, {"name": "plyer", "version": "2.1.0", "vulns": []}, {"name": "podcastparser", "version": "0.6.10", "vulns": []}, {"name": "pooch", "version": "1.8.2", "vulns": []}, {"name": "portalocker", "version": "2.10.1", "vulns": []}, {"name": "posthog", "version": "5.4.0", "vulns": []}, {"name": "preshed", "version": "3.0.10", "vulns": []}, {"name": "prettytable", "version": "3.11.0", "vulns": []}, {"name": "primepy", "version": "1.3", "vulns": []}, {"name": "primp", "version": "0.6.1", "vulns": []}, {"name": "prometheus-client", "version": "0.20.0", "vulns": []}, {"name": "prometheus-flask-exporter", "version": "0.23.1", "vulns": []}, {"name": "prompt-toolkit", "version": "3.0.47", "vulns": []}, {"name": "propcache", "version": "0.3.2", "vulns": []}, {"name": "proto-plus", "version": "1.24.0", "vulns": []}, {"name": "protobuf", "version": "4.25.8", "vulns": []}, {"name": "psutil", "version": "5.9.8", "vulns": []}, {"name": "psycopg2-binary", "version": "2.9.9", "vulns": []}, {"name": "ptyprocess", "version": "0.7.0", "vulns": []}, {"name": "pure-eval", "version": "0.2.3", "vulns": []}, {"name": "py", "version": "1.11.0", "vulns": [{"id": "PYSEC-2022-42969", "fix_versions": [], "aliases": ["GHSA-w596-4wvx-j9j6", "CVE-2022-42969"], "description": "The py library through 1.11.0 for Python allows remote attackers to conduct a ReDoS (Regular expression Denial of Service) attack via a Subversion repository with crafted info data, because the InfoSvnCommand argument is mishandled."}]}, {"name": "py-cpuinfo", "version": "9.0.0", "vulns": []}, {"name": "py-serializable", "version": "2.1.0", "vulns": []}, {"name": "pyannote-audio", "version": "3.3.2", "vulns": []}, {"name": "pyannote-core", "version": "5.0.0", "vulns": []}, {"name": "pyannote-database", "version": "5.1.3", "vulns": []}, {"name": "pyannote-metrics", "version": "3.2.1", "vulns": []}, {"name": "pyannote-pipeline", "version": "3.0.1", "vulns": []}, {"name": "pyarrow", "version": "18.1.0", "vulns": []}, {"name": "pyarrow-hotfix", "version": "0.6", "vulns": []}, {"name": "pyasn1", "version": "0.6.0", "vulns": []}, {"name": "pyasn1-modules", "version": "0.4.0", "vulns": []}, {"name": "pybase64", "version": "1.4.2", "vulns": []}, {"name": "pycodestyle", "version": "2.11.1", "vulns": []}, {"name": "pycparser", "version": "2.22", "vulns": []}, {"name": "pydantic", "version": "2.9.2", "vulns": []}, {"name": "pydantic-core", "version": "2.23.4", "vulns": []}, {"name": "pydantic-settings", "version": "2.10.1", "vulns": []}, {"name": "pydeck", "version": "0.9.1", "vulns": []}, {"name": "pydot", "version": "3.0.2", "vulns": []}, {"name": "pydub", "version": "0.25.1", "vulns": []}, {"name": "pyflakes", "version": "3.2.0", "vulns": []}, {"name": "pygithub", "version": "1.59.1", "vulns": []}, {"name": "pygments", "version": "2.19.1", "vulns": []}, {"name": "pyinstrument", "version": "4.6.2", "vulns": []}, {"name": "pyjwt", "version": "2.9.0", "vulns": []}, {"name": "pylatexenc", "version": "2.10", "vulns": []}, {"name": "pylint", "version": "2.17.7", "vulns": []}, {"name": "pynacl", "version": "1.5.0", "vulns": []}, {"name": "pypandoc", "version": "1.13", "vulns": []}, {"name": "pyparsing", "version": "3.2.1", "vulns": []}, {"name": "pypdf", "version": "4.3.1", "vulns": [{"id": "GHSA-7hfw-26vp-jp8m", "fix_versions": ["6.0.0"], "aliases": ["CVE-2025-55197"], "description": "### Impact An attacker who uses this vulnerability can craft a PDF which leads to the RAM being exhausted. This requires just reading the file if a series of FlateDecode filters is used on a malicious cross-reference stream. Other content streams are affected on explicit access.  ### Patches This has been fixed in [pypdf==6.0.0](https://github.com/py-pdf/pypdf/releases/tag/6.0.0).  ### Workarounds If you cannot upgrade yet, you might want to implement the workaround for `pypdf.filters.decompress` yourself: https://github.com/py-pdf/pypdf/blob/0dd57738bbdcdb63f0fb43d8a6b3d222b6946595/pypdf/filters.py#L72-L143  ### References This issue has been reported in #3429 and fixed in #3430."}]}, {"name": "pypdf4", "version": "1.27.0", "vulns": []}, {"name": "pypdfium2", "version": "4.30.0", "vulns": []}, {"name": "pyperclip", "version": "1.9.0", "vulns": []}, {"name": "pyphen", "version": "0.17.2", "vulns": []}, {"name": "pypika", "version": "0.48.9", "vulns": []}, {"name": "pyproject-hooks", "version": "1.2.0", "vulns": []}, {"name": "pyreadline3", "version": "3.4.1", "vulns": []}, {"name": "pyspnego", "version": "0.11.1", "vulns": []}, {"name": "pytesseract", "version": "0.3.13", "vulns": []}, {"name": "pytest", "version": "7.4.4", "vulns": []}, {"name": "pytest-asyncio", "version": "1.1.0", "vulns": []}, {"name": "pytest-bandit", "version": "0.6.1", "vulns": []}, {"name": "pytest-benchmark", "version": "4.0.0", "vulns": []}, {"name": "pytest-cov", "version": "6.0.0", "vulns": []}, {"name": "pytest-env", "version": "1.1.5", "vulns": []}, {"name": "pytest-flask", "version": "1.3.0", "vulns": []}, {"name": "pytest-json-report", "version": "1.5.0", "vulns": []}, {"name": "pytest-metadata", "version": "3.1.1", "vulns": []}, {"name": "pytest-mock", "version": "3.14.0", "vulns": []}, {"name": "pytest-randomly", "version": "3.16.0", "vulns": []}, {"name": "pytest-timeout", "version": "2.3.1", "vulns": []}, {"name": "pytest-xdist", "version": "3.6.1", "vulns": []}, {"name": "python-dateutil", "version": "2.9.0.post0", "vulns": []}, {"name": "python-dotenv", "version": "1.0.1", "vulns": []}, {"name": "python-json-logger", "version": "2.0.7", "vulns": []}, {"name": "python-magic", "version": "0.4.27", "vulns": []}, {"name": "python-multipart", "version": "0.0.20", "vulns": []}, {"name": "pytorch-lightning", "version": "2.5.5", "vulns": []}, {"name": "pytorch-metric-learning", "version": "2.9.0", "vulns": []}, {"name": "pytz", "version": "2024.2", "vulns": []}, {"name": "pywavelets", "version": "1.8.0", "vulns": []}, {"name": "pywin32", "version": "306", "vulns": []}, {"name": "pywin32-ctypes", "version": "0.2.3", "vulns": []}, {"name": "pywinpty", "version": "2.0.14", "vulns": []}, {"name": "pyyaml", "version": "6.0.2", "vulns": []}, {"name": "pyzmq", "version": "26.2.0", "vulns": []}, {"name": "qdrant-client", "version": "1.11.1", "vulns": []}, {"name": "qiskit", "version": "1.2.4", "vulns": [{"id": "GHSA-fpmr-m242-xm7x", "fix_versions": ["1.3.0"], "aliases": ["CVE-2025-1403"], "description": "### Impact  A maliciously crafted QPY file containing a malformed `symengine` serialization stream as part of the larger QPY serialization of a `ParameterExpression` object can cause a segfault within the `symengine` library, allowing an attacker to terminate the hosting process deserializing the QPY payload.  ### Patches  This issue is addressed in 1.3.0 when using QPY format version 13. QPY format versions 10, 11, and 12 are all still inherently vulnerable if they are using symengine symbolic encoding and `symengine <= 0.13.0` is installed in the deserializing environment (as of publishing there is no newer compatible release of symengine available). Using QPY 13 is strongly recommended for this reason.  The symengine 0.14.0 release has addressed the segfault issue, but it is backward incompatible and will not work with any Qiskit release; it also prevents loading a payload generated with any other version of symengine. Using QPY 13 is strongly recommended for this reason.  It is also strongly suggested to patch the locally installed version of symengine in the deserializing environment to prevent the specific segfault. The commit [1] can be applied on top of symengine 0.13.0 and used to build a patched python library that will not segfault in the presence of a malformed payload and instead raise a `RuntimeError` which will address the vulnerability.  ### Workarounds  As QPY is backwards compatible `qiskit.qpy.load()` function will always attempt to deserialize the `symengine`-serialized payloads in QPY format versions 10, 11, and 12. These are any payloads generated with the `use_symengine` argument on `qiskit.qpy.dump()` set to `True` (which is the default value starting in Qiskit 1.0.0. The only option is to disallow parsing if those QPY formats are being read and the `use_symengine` flag was set in the file's header. You can detect whether a payload is potentially vulnerable by using the following function built using the Python standard library:  ```python import struct from collections import namedtuple   def check_qpy_payload(path: str) -> bool:     \"\"\"Function to check if a QPY payload is potentially vulnerable to a symengine vulnerability.      Args:         path: The path to the QPY file      Returns:         Whether the specified payload is potentially vulnerable. If ``True`` the conditions for         being vulnerable exist, however the payload may not be vulnerable it can't be detected         until trying to deserialize.     \"\"\"     with open(path, \"rb\") as file_obj:         version = struct.unpack(\"!6sB\", file_obj.read(7))[1]         if version < 10 or version >= 13:             return False         file_obj.seek(0)         header_tuple = namedtuple(             \"FILE_HEADER\",             [                 \"preface\",                 \"qpy_version\",                 \"major_version\",                 \"minor_version\",                 \"patch_version\",                 \"num_programs\",                 \"symbolic_encoding\",             ],         )         header_pack_str = \"!6sBBBBQc\"         header_read_size = struct.calcsize(header_pack_str)         data = struct.unpack(header_pack_str, file_obj.read(header_read_size))         header = header_tuple(*data)         return header.symbolic_encoding == b\"e\" ```  Note, this function does **not** tell you whether the payload is malicious and will cause the segfault, just that conditions for it to be potentially malicious exist. It's not possible to know ahead of time whether `symengine` will segfault until the data is passed to that library.  ### References  [1] https://github.com/symengine/symengine/commit/eb3e292bf13b2dfdf0fa1c132944af8df2bc7d51"}]}, {"name": "qiskit-aer", "version": "0.15.1", "vulns": []}, {"name": "qiskit-algorithms", "version": "0.3.1", "vulns": []}, {"name": "qiskit-ibm-runtime", "version": "0.32.0", "vulns": []}, {"name": "qutip", "version": "5.1.1", "vulns": []}, {"name": "radon", "version": "5.1.0", "vulns": []}, {"name": "rank-bm25", "version": "0.2.2", "vulns": []}, {"name": "rapidfuzz", "version": "3.9.7", "vulns": []}, {"name": "readme-renderer", "version": "44.0", "vulns": []}, {"name": "redis", "version": "5.1.0b7", "vulns": []}, {"name": "referencing", "version": "0.35.1", "vulns": []}, {"name": "regex", "version": "2024.7.24", "vulns": []}, {"name": "reportlab", "version": "4.2.2", "vulns": []}, {"name": "requests", "version": "2.32.5", "vulns": []}, {"name": "requests-ntlm", "version": "1.3.0", "vulns": []}, {"name": "requests-oauthlib", "version": "1.3.1", "vulns": []}, {"name": "requests-toolbelt", "version": "1.0.0", "vulns": []}, {"name": "rfc3339-validator", "version": "0.1.4", "vulns": []}, {"name": "rfc3986", "version": "2.0.0", "vulns": []}, {"name": "rfc3986-validator", "version": "0.1.1", "vulns": []}, {"name": "rfc3987", "version": "1.3.8", "vulns": []}, {"name": "rich", "version": "13.5.3", "vulns": []}, {"name": "rpds-py", "version": "0.22.3", "vulns": []}, {"name": "rsa", "version": "4.9", "vulns": []}, {"name": "ruamel-yaml", "version": "0.18.14", "vulns": []}, {"name": "ruamel-yaml-clib", "version": "0.2.12", "vulns": []}, {"name": "ruff", "version": "0.12.9", "vulns": []}, {"name": "rustworkx", "version": "0.15.1", "vulns": []}, {"name": "safehttpx", "version": "0.1.6", "vulns": []}, {"name": "safetensors", "version": "0.4.4", "vulns": []}, {"name": "safety", "version": "3.6.0", "vulns": []}, {"name": "safety-schemas", "version": "0.0.14", "vulns": []}, {"name": "scapy", "version": "2.6.1", "vulns": []}, {"name": "scikit-image", "version": "0.24.0", "vulns": []}, {"name": "scikit-learn", "version": "1.6.0", "vulns": []}, {"name": "scipy", "version": "1.15.1", "vulns": []}, {"name": "seaborn", "version": "0.13.2", "vulns": []}, {"name": "semantic-version", "version": "2.10.0", "vulns": []}, {"name": "semgrep", "version": "1.134.0", "vulns": []}, {"name": "semver", "version": "3.0.4", "vulns": []}, {"name": "send2trash", "version": "1.8.3", "vulns": []}, {"name": "sentence-transformers", "version": "5.1.0", "vulns": []}, {"name": "sentencepiece", "version": "0.2.0", "vulns": []}, {"name": "sentry-sdk", "version": "1.40.6", "vulns": [{"id": "GHSA-g92j-qhmh-64v2", "fix_versions": ["1.45.1", "2.8.0"], "aliases": ["CVE-2024-40647"], "description": "### Impact  The bug in Sentry's Python SDK <2.8.0 results in the unintentional exposure of environment variables to subprocesses despite the `env={}` setting.  ### Details  In Python's `subprocess` calls, all environment variables are passed to subprocesses by default. However, if you specifically do not want them to be passed to subprocesses, you may use `env` argument in `subprocess` calls, like in this example:  ``` >>> subprocess.check_output([\"env\"], env={\"TEST\":\"1\"}) b'TEST=1\\n' ```  If you'd want to not pass any variables, you can set an empty dict:  ``` >>> subprocess.check_output([\"env\"], env={}) b'' ```  However, the bug in Sentry SDK <2.8.0 causes **all environment variables** to be passed to the subprocesses when `env={}` is set, unless the Sentry SDK's [Stdlib](https://docs.sentry.io/platforms/python/integrations/default-integrations/#stdlib) integration is disabled. The Stdlib integration is enabled by default.  ### Patches The issue has been patched in https://github.com/getsentry/sentry-python/pull/3251 and the fix released in [sentry-sdk==2.8.0](https://github.com/getsentry/sentry-python/releases/tag/2.8.0). The fix was also backported to [sentry-sdk==1.45.1](https://github.com/getsentry/sentry-python/releases/tag/1.45.1).  ### Workarounds  We strongly recommend upgrading to the latest SDK version. However, if it's not possible, and if passing environment variables to child processes poses a security risk for you, there are two options:  1. In your application, replace `env={}` with the minimal dict `env={\"EMPTY_ENV\":\"1\"}` or similar.  OR  2. Disable Stdlib integration: ``` import sentry_sdk  # Should go before sentry_sdk.init sentry_sdk.integrations._DEFAULT_INTEGRATIONS.remove(\"sentry_sdk.integrations.stdlib.StdlibIntegration\")  sentry_sdk.init(...) ```  ### References * Sentry docs: [Default integrations](https://docs.sentry.io/platforms/python/integrations/default-integrations/) * Python docs: [subprocess module](https://docs.python.org/3/library/subprocess.html) * Patch https://github.com/getsentry/sentry-python/pull/3251"}]}, {"name": "setproctitle", "version": "1.3.3", "vulns": []}, {"name": "setuptools", "version": "80.9.0", "vulns": []}, {"name": "setuptools-scm", "version": "8.1.0", "vulns": []}, {"name": "sgmllib3k", "version": "1.0.0", "vulns": []}, {"name": "shellingham", "version": "1.5.4", "vulns": []}, {"name": "six", "version": "1.17.0", "vulns": []}, {"name": "smart-open", "version": "7.3.1", "vulns": []}, {"name": "smmap", "version": "5.0.2", "vulns": []}, {"name": "sniffio", "version": "1.3.1", "vulns": []}, {"name": "snowballstemmer", "version": "2.2.0", "vulns": []}, {"name": "sortedcontainers", "version": "2.4.0", "vulns": []}, {"name": "sounddevice", "version": "0.5.0", "vulns": []}, {"name": "soundfile", "version": "0.12.1", "vulns": []}, {"name": "soupsieve", "version": "2.6", "vulns": []}, {"name": "soxr", "version": "0.5.0.post1", "vulns": []}, {"name": "spacy", "version": "3.8.7", "vulns": []}, {"name": "spacy-legacy", "version": "3.0.12", "vulns": []}, {"name": "spacy-loggers", "version": "1.0.5", "vulns": []}, {"name": "sparse", "version": "0.15.4", "vulns": []}, {"name": "speechbrain", "version": "1.0.3", "vulns": []}, {"name": "spek-connascence-analyzer", "skip_reason": "Dependency not found on PyPI and could not be audited: spek-connascence-analyzer (2.0.0)"}, {"name": "sphinx", "version": "8.1.3", "vulns": []}, {"name": "sphinx-autodoc-typehints", "version": "2.5.0", "vulns": []}, {"name": "sphinx-rtd-theme", "version": "3.0.2", "vulns": []}, {"name": "sphinxcontrib-applehelp", "version": "2.0.0", "vulns": []}, {"name": "sphinxcontrib-devhelp", "version": "2.0.0", "vulns": []}, {"name": "sphinxcontrib-htmlhelp", "version": "2.1.0", "vulns": []}, {"name": "sphinxcontrib-jquery", "version": "4.1", "vulns": []}, {"name": "sphinxcontrib-jsmath", "version": "1.0.1", "vulns": []}, {"name": "sphinxcontrib-qthelp", "version": "2.0.0", "vulns": []}, {"name": "sphinxcontrib-serializinghtml", "version": "2.0.0", "vulns": []}, {"name": "spinners", "version": "0.0.24", "vulns": []}, {"name": "sqlalchemy", "version": "2.0.32", "vulns": []}, {"name": "srsly", "version": "2.5.1", "vulns": []}, {"name": "sspilib", "version": "0.2.0", "vulns": []}, {"name": "stack-data", "version": "0.6.3", "vulns": []}, {"name": "starlette", "version": "0.47.1", "vulns": [{"id": "GHSA-2c2j-9gv5-cj73", "fix_versions": ["0.47.2"], "aliases": ["CVE-2025-54121"], "description": "### Summary When parsing a multi-part form with large files (greater than the [default max spool size](https://github.com/encode/starlette/blob/fa5355442753f794965ae1af0f87f9fec1b9a3de/starlette/formparsers.py#L126)) `starlette` will block the main thread to roll the file over to disk. This blocks the event thread which means we can't accept new connections.  ### Details Please see this discussion for details: https://github.com/encode/starlette/discussions/2927#discussioncomment-13721403. In summary the following UploadFile code (copied from [here](https://github.com/encode/starlette/blob/fa5355442753f794965ae1af0f87f9fec1b9a3de/starlette/datastructures.py#L436C5-L447C14)) has a minor bug. Instead of just checking for `self._in_memory` we should also check if the additional bytes will cause a rollover.  ```python      @property     def _in_memory(self) -> bool:         # check for SpooledTemporaryFile._rolled         rolled_to_disk = getattr(self.file, \"_rolled\", True)         return not rolled_to_disk      async def write(self, data: bytes) -> None:         if self.size is not None:             self.size += len(data)          if self._in_memory:             self.file.write(data)         else:             await run_in_threadpool(self.file.write, data) ```  I have already created a PR which fixes the problem: https://github.com/encode/starlette/pull/2962   ### PoC See the discussion [here](https://github.com/encode/starlette/discussions/2927#discussioncomment-13721403) for steps on how to reproduce.  ### Impact To be honest, very low and not many users will be impacted. Parsing large forms is already CPU intensive so the additional IO block doesn't slow down `starlette` that much on systems with modern HDDs/SSDs. If someone is running on tape they might see a greater impact."}]}, {"name": "statsmodels", "version": "0.14.4", "vulns": []}, {"name": "stevedore", "version": "5.3.0", "vulns": []}, {"name": "streamlit", "version": "1.41.1", "vulns": []}, {"name": "striprtf", "version": "0.0.26", "vulns": []}, {"name": "symengine", "version": "0.13.0", "vulns": []}, {"name": "sympy", "version": "1.14.0", "vulns": []}, {"name": "tabulate", "version": "0.9.0", "vulns": []}, {"name": "tenacity", "version": "8.5.0", "vulns": []}, {"name": "tensorboardx", "version": "2.6.4", "vulns": []}, {"name": "termcolor", "version": "2.4.0", "vulns": []}, {"name": "terminado", "version": "0.18.1", "vulns": []}, {"name": "textstat", "version": "0.7.10", "vulns": []}, {"name": "thefuzz", "version": "0.20.0", "vulns": []}, {"name": "thinc", "version": "8.3.6", "vulns": []}, {"name": "threadpoolctl", "version": "3.5.0", "vulns": []}, {"name": "tifffile", "version": "2024.8.28", "vulns": []}, {"name": "tiktoken", "version": "0.7.0", "vulns": []}, {"name": "tinycss2", "version": "1.4.0", "vulns": []}, {"name": "tld", "version": "0.13", "vulns": []}, {"name": "tokenizers", "version": "0.19.1", "vulns": []}, {"name": "toml", "version": "0.10.2", "vulns": []}, {"name": "tomli", "version": "2.0.2", "vulns": []}, {"name": "tomlkit", "version": "0.13.2", "vulns": []}, {"name": "toolz", "version": "1.0.0", "vulns": []}, {"name": "torch", "version": "2.8.0", "vulns": []}, {"name": "torch-audiomentations", "version": "0.12.0", "vulns": []}, {"name": "torch-pitch-shift", "version": "1.2.5", "vulns": []}, {"name": "torchaudio", "version": "2.8.0", "vulns": []}, {"name": "torchmetrics", "version": "1.8.2", "vulns": []}, {"name": "torchvision", "version": "0.23.0", "vulns": []}, {"name": "tornado", "version": "6.4.2", "vulns": [{"id": "GHSA-7cx3-6m66-7c5m", "fix_versions": ["6.5"], "aliases": ["CVE-2025-47287"], "description": "### Summary  When Tornado's ``multipart/form-data`` parser encounters certain errors, it logs a warning but continues trying to parse the remainder of the data. This allows remote attackers to generate an extremely high volume of logs, constituting a DoS attack. This DoS is compounded by the fact that the logging subsystem is synchronous.  ### Affected versions  All versions of Tornado prior to 6.5 are affected. The vulnerable parser is enabled by default.  ### Solution  Upgrade to Tornado version 6.5. In the meantime, risk can be mitigated by blocking `Content-Type: multipart/form-data` in a proxy."}]}, {"name": "tqdm", "version": "4.67.1", "vulns": []}, {"name": "trafilatura", "version": "1.9.0", "vulns": []}, {"name": "traitlets", "version": "5.14.3", "vulns": []}, {"name": "transformers", "skip_reason": "Dependency not found on PyPI and could not be audited: transformers (4.45.0.dev0)"}, {"name": "tree-sitter", "version": "0.21.3", "vulns": []}, {"name": "tree-sitter-languages", "version": "1.10.2", "vulns": []}, {"name": "twine", "version": "6.0.1", "vulns": []}, {"name": "typer", "version": "0.16.0", "vulns": []}, {"name": "types-python-dateutil", "version": "2.9.0.20241003", "vulns": []}, {"name": "typing-extensions", "version": "4.12.2", "vulns": []}, {"name": "typing-inspect", "version": "0.9.0", "vulns": []}, {"name": "typing-inspection", "version": "0.4.1", "vulns": []}, {"name": "tzdata", "version": "2024.2", "vulns": []}, {"name": "tzlocal", "version": "5.2", "vulns": []}, {"name": "ujson", "version": "5.11.0", "vulns": []}, {"name": "uri-template", "version": "1.3.0", "vulns": []}, {"name": "uritemplate", "version": "4.1.1", "vulns": []}, {"name": "urllib3", "version": "2.5.0", "vulns": []}, {"name": "uvicorn", "version": "0.35.0", "vulns": []}, {"name": "vine", "version": "5.1.0", "vulns": []}, {"name": "virtualenv", "version": "20.25.1", "vulns": [{"id": "PYSEC-2024-187", "fix_versions": ["20.26.6"], "aliases": ["CVE-2024-53899"], "description": "virtualenv before 20.26.6 allows command injection through the activation scripts for a virtual environment. Magic template strings are not quoted correctly when replacing. NOTE: this is not the same as CVE-2024-9287."}]}, {"name": "vulture", "version": "2.14", "vulns": []}, {"name": "wandb", "version": "0.18.3", "vulns": []}, {"name": "wasabi", "version": "1.1.3", "vulns": []}, {"name": "watchdog", "version": "6.0.0", "vulns": []}, {"name": "watchfiles", "version": "1.1.0", "vulns": []}, {"name": "wcmatch", "version": "8.5.2", "vulns": []}, {"name": "wcwidth", "version": "0.2.13", "vulns": []}, {"name": "weasel", "version": "0.4.1", "vulns": []}, {"name": "webcolors", "version": "24.8.0", "vulns": []}, {"name": "webencodings", "version": "0.5.1", "vulns": []}, {"name": "websocket-client", "version": "1.8.0", "vulns": []}, {"name": "websockets", "version": "15.0.1", "vulns": []}, {"name": "werkzeug", "version": "3.1.3", "vulns": []}, {"name": "wget", "version": "3.2", "vulns": []}, {"name": "wheel", "version": "0.45.1", "vulns": []}, {"name": "widgetsnbextension", "version": "4.0.13", "vulns": []}, {"name": "wrapt", "version": "1.16.0", "vulns": []}, {"name": "xarray", "version": "2024.10.0", "vulns": []}, {"name": "xarray-einstats", "version": "0.8.0", "vulns": []}, {"name": "xenon", "version": "0.9.3", "vulns": []}, {"name": "xxhash", "version": "3.5.0", "vulns": []}, {"name": "xyzservices", "version": "2025.4.0", "vulns": []}, {"name": "yarl", "version": "1.20.1", "vulns": []}, {"name": "zipp", "version": "3.20.1", "vulns": []}, {"name": "zstandard", "version": "0.24.0", "vulns": []}], "fixes": []}
